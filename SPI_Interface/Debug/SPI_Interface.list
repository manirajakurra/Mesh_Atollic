
G:\sem4\cap_workspace\STM32 to STM32 wired communnication.zip_expanded\STM32 to STM32 wired communnication\cap\SPI_Interface\Debug\SPI_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001834  08001834  00011834  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800186c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000104  20000104  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000087f3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015ae  00000000  00000000  0002882f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003630  00000000  00000000  00029ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005e8  00000000  00000000  0002d410  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000990  00000000  00000000  0002d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002fcc  00000000  00000000  0002e388  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000204e  00000000  00000000  00031354  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  000333a2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000fc8  00000000  00000000  00033420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800181c 	.word	0x0800181c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800181c 	.word	0x0800181c

080001d4 <HAL_MspInit>:
 80001d4:	4770      	bx	lr
	...

080001d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001da:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001dc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001de:	6818      	ldr	r0, [r3, #0]
 80001e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e8:	f000 f88c 	bl	8000304 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001ec:	2200      	movs	r2, #0
 80001ee:	4621      	mov	r1, r4
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f846 	bl	8000284 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001f8:	2000      	movs	r0, #0
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000008 	.word	0x20000008

08000200 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000202:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	6813      	ldr	r3, [r2, #0]
 8000206:	f043 0310 	orr.w	r3, r3, #16
 800020a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 f827 	bl	8000260 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	200f      	movs	r0, #15
 8000214:	f7ff ffe0 	bl	80001d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000218:	f7ff ffdc 	bl	80001d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40022000 	.word	0x40022000

08000224 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028

08000234 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000028 	.word	0x20000028

08000240 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000242:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000244:	f7ff fff6 	bl	8000234 <HAL_GetTick>
  uint32_t wait = Delay;
 8000248:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800024a:	1c63      	adds	r3, r4, #1
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 800024c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800024e:	bf18      	it	ne
 8000250:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000252:	f7ff ffef 	bl	8000234 <HAL_GetTick>
 8000256:	1b40      	subs	r0, r0, r5
 8000258:	42a0      	cmp	r0, r4
 800025a:	d3fa      	bcc.n	8000252 <HAL_Delay+0x12>
  {
  }
}
 800025c:	b003      	add	sp, #12
 800025e:	bd30      	pop	{r4, r5, pc}

08000260 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000260:	4a07      	ldr	r2, [pc, #28]	; (8000280 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000262:	68d3      	ldr	r3, [r2, #12]
 8000264:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000268:	041b      	lsls	r3, r3, #16
 800026a:	0c1b      	lsrs	r3, r3, #16
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000270:	0200      	lsls	r0, r0, #8
 8000272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000276:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800027a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800027c:	60d3      	str	r3, [r2, #12]
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <HAL_NVIC_SetPriority+0x60>)
 8000286:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000288:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800028c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	2c04      	cmp	r4, #4
 8000296:	bf28      	it	cs
 8000298:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029a:	2d06      	cmp	r5, #6

  return (
 800029c:	f04f 0501 	mov.w	r5, #1
 80002a0:	fa05 f404 	lsl.w	r4, r5, r4
 80002a4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a8:	bf8c      	ite	hi
 80002aa:	3b03      	subhi	r3, #3
 80002ac:	2300      	movls	r3, #0

  return (
 80002ae:	400c      	ands	r4, r1
 80002b0:	409c      	lsls	r4, r3
 80002b2:	fa05 f303 	lsl.w	r3, r5, r3
 80002b6:	3b01      	subs	r3, #1
 80002b8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002ba:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002bc:	ea42 0204 	orr.w	r2, r2, r4
 80002c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	bfaf      	iteee	ge
 80002c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	f000 000f 	andlt.w	r0, r0, #15
 80002ce:	4b06      	ldrlt	r3, [pc, #24]	; (80002e8 <HAL_NVIC_SetPriority+0x64>)
 80002d0:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	bfa5      	ittet	ge
 80002d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d8:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e0:	bd30      	pop	{r4, r5, pc}
 80002e2:	bf00      	nop
 80002e4:	e000ed00 	.word	0xe000ed00
 80002e8:	e000ed14 	.word	0xe000ed14

080002ec <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002ec:	0942      	lsrs	r2, r0, #5
 80002ee:	2301      	movs	r3, #1
 80002f0:	f000 001f 	and.w	r0, r0, #31
 80002f4:	fa03 f000 	lsl.w	r0, r3, r0
 80002f8:	4b01      	ldr	r3, [pc, #4]	; (8000300 <HAL_NVIC_EnableIRQ+0x14>)
 80002fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100

08000304 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000304:	3801      	subs	r0, #1
 8000306:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030a:	d20a      	bcs.n	8000322 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030e:	4a07      	ldr	r2, [pc, #28]	; (800032c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000310:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	21f0      	movs	r1, #240	; 0xf0
 8000314:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000318:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800031c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000322:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000e010 	.word	0xe000e010
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000334:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80004d0 <HAL_GPIO_Init+0x1a0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000338:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800033a:	f8df c198 	ldr.w	ip, [pc, #408]	; 80004d4 <HAL_GPIO_Init+0x1a4>
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800033e:	b085      	sub	sp, #20
 8000340:	4644      	mov	r4, r8
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000342:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000344:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000346:	9a01      	ldr	r2, [sp, #4]
 8000348:	40da      	lsrs	r2, r3
 800034a:	f000 80bc 	beq.w	80004c6 <HAL_GPIO_Init+0x196>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800034e:	f04f 0e01 	mov.w	lr, #1

    if(iocurrent)
 8000352:	9a01      	ldr	r2, [sp, #4]

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000354:	fa0e fe03 	lsl.w	lr, lr, r3

    if(iocurrent)
 8000358:	ea12 060e 	ands.w	r6, r2, lr
 800035c:	f000 80b1 	beq.w	80004c2 <HAL_GPIO_Init+0x192>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000360:	684a      	ldr	r2, [r1, #4]
 8000362:	f022 0910 	bic.w	r9, r2, #16
 8000366:	f1b9 0f02 	cmp.w	r9, #2
 800036a:	d114      	bne.n	8000396 <HAL_GPIO_Init+0x66>
 800036c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000370:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000374:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000378:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800037c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000380:	250f      	movs	r5, #15
 8000382:	fa05 f50b 	lsl.w	r5, r5, fp
 8000386:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800038a:	690f      	ldr	r7, [r1, #16]
 800038c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000390:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000392:	f8ca 7020 	str.w	r7, [sl, #32]
 8000396:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800039a:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800039c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800039e:	fa05 f50a 	lsl.w	r5, r5, sl
 80003a2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a4:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a8:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003aa:	fa0b fb0a 	lsl.w	fp, fp, sl
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ae:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b2:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b6:	f1b9 0f01 	cmp.w	r9, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80003ba:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003bc:	d811      	bhi.n	80003e2 <HAL_GPIO_Init+0xb2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80003be:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003c4:	68cf      	ldr	r7, [r1, #12]
 80003c6:	fa07 f70a 	lsl.w	r7, r7, sl
 80003ca:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80003ce:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80003d0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003d2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d6:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80003da:	409f      	lsls	r7, r3
 80003dc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003e0:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80003e2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003e6:	688f      	ldr	r7, [r1, #8]
 80003e8:	fa07 f70a 	lsl.w	r7, r7, sl
 80003ec:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003ee:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f0:	00d5      	lsls	r5, r2, #3
 80003f2:	d566      	bpl.n	80004c2 <HAL_GPIO_Init+0x192>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f4:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80003f8:	f045 0501 	orr.w	r5, r5, #1
 80003fc:	f8cc 5018 	str.w	r5, [ip, #24]
 8000400:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8000404:	f023 0e03 	bic.w	lr, r3, #3
 8000408:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 800040c:	f005 0501 	and.w	r5, r5, #1
 8000410:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000414:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000416:	f003 0903 	and.w	r9, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800041c:	f8de 7008 	ldr.w	r7, [lr, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000420:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000424:	250f      	movs	r5, #15
 8000426:	fa05 f509 	lsl.w	r5, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800042a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800042e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000432:	d019      	beq.n	8000468 <HAL_GPIO_Init+0x138>
 8000434:	4d25      	ldr	r5, [pc, #148]	; (80004cc <HAL_GPIO_Init+0x19c>)
 8000436:	42a8      	cmp	r0, r5
 8000438:	d018      	beq.n	800046c <HAL_GPIO_Init+0x13c>
 800043a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800043e:	42a8      	cmp	r0, r5
 8000440:	d016      	beq.n	8000470 <HAL_GPIO_Init+0x140>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	d014      	beq.n	8000474 <HAL_GPIO_Init+0x144>
 800044a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044e:	42a8      	cmp	r0, r5
 8000450:	d012      	beq.n	8000478 <HAL_GPIO_Init+0x148>
 8000452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000456:	42a8      	cmp	r0, r5
 8000458:	d010      	beq.n	800047c <HAL_GPIO_Init+0x14c>
 800045a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045e:	42a8      	cmp	r0, r5
 8000460:	bf14      	ite	ne
 8000462:	2507      	movne	r5, #7
 8000464:	2506      	moveq	r5, #6
 8000466:	e00a      	b.n	800047e <HAL_GPIO_Init+0x14e>
 8000468:	2500      	movs	r5, #0
 800046a:	e008      	b.n	800047e <HAL_GPIO_Init+0x14e>
 800046c:	2501      	movs	r5, #1
 800046e:	e006      	b.n	800047e <HAL_GPIO_Init+0x14e>
 8000470:	2502      	movs	r5, #2
 8000472:	e004      	b.n	800047e <HAL_GPIO_Init+0x14e>
 8000474:	2503      	movs	r5, #3
 8000476:	e002      	b.n	800047e <HAL_GPIO_Init+0x14e>
 8000478:	2504      	movs	r5, #4
 800047a:	e000      	b.n	800047e <HAL_GPIO_Init+0x14e>
 800047c:	2505      	movs	r5, #5
 800047e:	fa05 f509 	lsl.w	r5, r5, r9
 8000482:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000484:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000488:	f8d8 5000 	ldr.w	r5, [r8]
        temp &= ~((uint32_t)iocurrent);
 800048c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800048e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000492:	bf0c      	ite	eq
 8000494:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000496:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000498:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800049a:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004a0:	bf0c      	ite	eq
 80004a2:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80004a4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004a6:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004a8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004aa:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80004ae:	bf0c      	ite	eq
 80004b0:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80004b2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80004b4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80004b6:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b8:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80004ba:	bf54      	ite	pl
 80004bc:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80004be:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004c0:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 80004c2:	3301      	adds	r3, #1
 80004c4:	e73f      	b.n	8000346 <HAL_GPIO_Init+0x16>
  }
}
 80004c6:	b005      	add	sp, #20
 80004c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004cc:	48000400 	.word	0x48000400
 80004d0:	40010400 	.word	0x40010400
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004d8:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80004da:	4219      	tst	r1, r3
}
 80004dc:	bf14      	ite	ne
 80004de:	2001      	movne	r0, #1
 80004e0:	2000      	moveq	r0, #0
 80004e2:	4770      	bx	lr

080004e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004e4:	b10a      	cbz	r2, 80004ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004e6:	6181      	str	r1, [r0, #24]
 80004e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004ea:	6281      	str	r1, [r0, #40]	; 0x28
 80004ec:	4770      	bx	lr

080004ee <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004ee:	6943      	ldr	r3, [r0, #20]
 80004f0:	4059      	eors	r1, r3
 80004f2:	6141      	str	r1, [r0, #20]
 80004f4:	4770      	bx	lr
	...

080004f8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004f8:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004fa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004fe:	07df      	lsls	r7, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000500:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000502:	d403      	bmi.n	800050c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000504:	682b      	ldr	r3, [r5, #0]
 8000506:	079e      	lsls	r6, r3, #30
 8000508:	d47b      	bmi.n	8000602 <HAL_RCC_OscConfig+0x10a>
 800050a:	e100      	b.n	800070e <HAL_RCC_OscConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800050c:	4cb5      	ldr	r4, [pc, #724]	; (80007e4 <HAL_RCC_OscConfig+0x2ec>)
 800050e:	6863      	ldr	r3, [r4, #4]
 8000510:	f003 030c 	and.w	r3, r3, #12
 8000514:	2b04      	cmp	r3, #4
 8000516:	d00a      	beq.n	800052e <HAL_RCC_OscConfig+0x36>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000518:	6863      	ldr	r3, [r4, #4]
 800051a:	f003 030c 	and.w	r3, r3, #12
 800051e:	2b08      	cmp	r3, #8
 8000520:	d11a      	bne.n	8000558 <HAL_RCC_OscConfig+0x60>
 8000522:	6863      	ldr	r3, [r4, #4]
 8000524:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800052c:	d114      	bne.n	8000558 <HAL_RCC_OscConfig+0x60>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800052e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000532:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000536:	6821      	ldr	r1, [r4, #0]
 8000538:	fa93 f3a3 	rbit	r3, r3
 800053c:	fab3 f383 	clz	r3, r3
 8000540:	f003 031f 	and.w	r3, r3, #31
 8000544:	2201      	movs	r2, #1
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	420b      	tst	r3, r1
 800054c:	d0da      	beq.n	8000504 <HAL_RCC_OscConfig+0xc>
 800054e:	686b      	ldr	r3, [r5, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1d7      	bne.n	8000504 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000554:	2001      	movs	r0, #1
 8000556:	e254      	b.n	8000a02 <HAL_RCC_OscConfig+0x50a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000558:	686b      	ldr	r3, [r5, #4]
 800055a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800055e:	d016      	beq.n	800058e <HAL_RCC_OscConfig+0x96>
 8000560:	b973      	cbnz	r3, 8000580 <HAL_RCC_OscConfig+0x88>
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000568:	6023      	str	r3, [r4, #0]
 800056a:	6823      	ldr	r3, [r4, #0]
 800056c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000570:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000572:	f7ff fe5f 	bl	8000234 <HAL_GetTick>
 8000576:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800057a:	4680      	mov	r8, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800057c:	2701      	movs	r7, #1
 800057e:	e032      	b.n	80005e6 <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	d106      	bne.n	8000596 <HAL_RCC_OscConfig+0x9e>
 8000588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800058c:	6023      	str	r3, [r4, #0]
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000594:	e005      	b.n	80005a2 <HAL_RCC_OscConfig+0xaa>
 8000596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059a:	6023      	str	r3, [r4, #0]
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a2:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005a4:	f7ff fe46 	bl	8000234 <HAL_GetTick>
 80005a8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005ac:	4680      	mov	r8, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005ae:	2701      	movs	r7, #1
 80005b0:	fa96 f3a6 	rbit	r3, r6
 80005b4:	6822      	ldr	r2, [r4, #0]
 80005b6:	fa96 f3a6 	rbit	r3, r6
 80005ba:	fab3 f383 	clz	r3, r3
 80005be:	f003 031f 	and.w	r3, r3, #31
 80005c2:	fa07 f303 	lsl.w	r3, r7, r3
 80005c6:	4213      	tst	r3, r2
 80005c8:	d19c      	bne.n	8000504 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ca:	f7ff fe33 	bl	8000234 <HAL_GetTick>
 80005ce:	ebc8 0000 	rsb	r0, r8, r0
 80005d2:	2864      	cmp	r0, #100	; 0x64
 80005d4:	d9ec      	bls.n	80005b0 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 80005d6:	2003      	movs	r0, #3
 80005d8:	e213      	b.n	8000a02 <HAL_RCC_OscConfig+0x50a>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005da:	f7ff fe2b 	bl	8000234 <HAL_GetTick>
 80005de:	ebc8 0000 	rsb	r0, r8, r0
 80005e2:	2864      	cmp	r0, #100	; 0x64
 80005e4:	d8f7      	bhi.n	80005d6 <HAL_RCC_OscConfig+0xde>
 80005e6:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ea:	6822      	ldr	r2, [r4, #0]
 80005ec:	fa96 f3a6 	rbit	r3, r6
 80005f0:	fab3 f383 	clz	r3, r3
 80005f4:	f003 031f 	and.w	r3, r3, #31
 80005f8:	fa07 f303 	lsl.w	r3, r7, r3
 80005fc:	4213      	tst	r3, r2
 80005fe:	d1ec      	bne.n	80005da <HAL_RCC_OscConfig+0xe2>
 8000600:	e780      	b.n	8000504 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000602:	4c78      	ldr	r4, [pc, #480]	; (80007e4 <HAL_RCC_OscConfig+0x2ec>)
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	f013 0f0c 	tst.w	r3, #12
 800060a:	d00a      	beq.n	8000622 <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800060c:	6863      	ldr	r3, [r4, #4]
 800060e:	f003 030c 	and.w	r3, r3, #12
 8000612:	2b08      	cmp	r3, #8
 8000614:	d125      	bne.n	8000662 <HAL_RCC_OscConfig+0x16a>
 8000616:	6863      	ldr	r3, [r4, #4]
 8000618:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800061c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000620:	d11f      	bne.n	8000662 <HAL_RCC_OscConfig+0x16a>
 8000622:	2302      	movs	r3, #2
 8000624:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000628:	6821      	ldr	r1, [r4, #0]
 800062a:	fa93 f3a3 	rbit	r3, r3
 800062e:	fab3 f383 	clz	r3, r3
 8000632:	f003 031f 	and.w	r3, r3, #31
 8000636:	2201      	movs	r2, #1
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	420b      	tst	r3, r1
 800063e:	d002      	beq.n	8000646 <HAL_RCC_OscConfig+0x14e>
 8000640:	68eb      	ldr	r3, [r5, #12]
 8000642:	4293      	cmp	r3, r2
 8000644:	d186      	bne.n	8000554 <HAL_RCC_OscConfig+0x5c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	22f8      	movs	r2, #248	; 0xf8
 800064a:	fa92 f2a2 	rbit	r2, r2
 800064e:	6929      	ldr	r1, [r5, #16]
 8000650:	fab2 f282 	clz	r2, r2
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800065c:	4313      	orrs	r3, r2
 800065e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000660:	e055      	b.n	800070e <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000662:	68ea      	ldr	r2, [r5, #12]
 8000664:	2601      	movs	r6, #1
 8000666:	b382      	cbz	r2, 80006ca <HAL_RCC_OscConfig+0x1d2>
 8000668:	fa96 f3a6 	rbit	r3, r6
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800066c:	fab3 f383 	clz	r3, r3
 8000670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	2702      	movs	r7, #2
 800067c:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800067e:	f7ff fdd9 	bl	8000234 <HAL_GetTick>
 8000682:	4680      	mov	r8, r0
 8000684:	fa97 f3a7 	rbit	r3, r7
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000688:	4856      	ldr	r0, [pc, #344]	; (80007e4 <HAL_RCC_OscConfig+0x2ec>)
 800068a:	6822      	ldr	r2, [r4, #0]
 800068c:	fa97 f3a7 	rbit	r3, r7
 8000690:	fab3 f383 	clz	r3, r3
 8000694:	f003 031f 	and.w	r3, r3, #31
 8000698:	fa06 f303 	lsl.w	r3, r6, r3
 800069c:	4213      	tst	r3, r2
 800069e:	d106      	bne.n	80006ae <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a0:	f7ff fdc8 	bl	8000234 <HAL_GetTick>
 80006a4:	ebc8 0000 	rsb	r0, r8, r0
 80006a8:	2802      	cmp	r0, #2
 80006aa:	d9eb      	bls.n	8000684 <HAL_RCC_OscConfig+0x18c>
 80006ac:	e793      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ae:	6803      	ldr	r3, [r0, #0]
 80006b0:	22f8      	movs	r2, #248	; 0xf8
 80006b2:	fa92 f2a2 	rbit	r2, r2
 80006b6:	6929      	ldr	r1, [r5, #16]
 80006b8:	fab2 f282 	clz	r2, r2
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006c4:	4313      	orrs	r3, r2
 80006c6:	6003      	str	r3, [r0, #0]
 80006c8:	e021      	b.n	800070e <HAL_RCC_OscConfig+0x216>
 80006ca:	fa96 f3a6 	rbit	r3, r6
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80006ce:	fab3 f383 	clz	r3, r3
 80006d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	2702      	movs	r7, #2
 80006de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006e0:	f7ff fda8 	bl	8000234 <HAL_GetTick>
 80006e4:	4680      	mov	r8, r0
 80006e6:	fa97 f3a7 	rbit	r3, r7
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006ea:	6822      	ldr	r2, [r4, #0]
 80006ec:	fa97 f3a7 	rbit	r3, r7
 80006f0:	fab3 f383 	clz	r3, r3
 80006f4:	f003 031f 	and.w	r3, r3, #31
 80006f8:	fa06 f303 	lsl.w	r3, r6, r3
 80006fc:	4213      	tst	r3, r2
 80006fe:	d006      	beq.n	800070e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000700:	f7ff fd98 	bl	8000234 <HAL_GetTick>
 8000704:	ebc8 0000 	rsb	r0, r8, r0
 8000708:	2802      	cmp	r0, #2
 800070a:	d9ec      	bls.n	80006e6 <HAL_RCC_OscConfig+0x1ee>
 800070c:	e763      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800070e:	682b      	ldr	r3, [r5, #0]
 8000710:	071c      	lsls	r4, r3, #28
 8000712:	d403      	bmi.n	800071c <HAL_RCC_OscConfig+0x224>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000714:	682b      	ldr	r3, [r5, #0]
 8000716:	0758      	lsls	r0, r3, #29
 8000718:	d44c      	bmi.n	80007b4 <HAL_RCC_OscConfig+0x2bc>
 800071a:	e0e3      	b.n	80008e4 <HAL_RCC_OscConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800071c:	6969      	ldr	r1, [r5, #20]
 800071e:	4e31      	ldr	r6, [pc, #196]	; (80007e4 <HAL_RCC_OscConfig+0x2ec>)
 8000720:	2401      	movs	r4, #1
 8000722:	b319      	cbz	r1, 800076c <HAL_RCC_OscConfig+0x274>
 8000724:	fa94 f2a4 	rbit	r2, r4
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <HAL_RCC_OscConfig+0x2f0>)
 800072a:	fab2 f282 	clz	r2, r2
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	2702      	movs	r7, #2
 8000734:	601c      	str	r4, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000736:	f7ff fd7d 	bl	8000234 <HAL_GetTick>
 800073a:	4680      	mov	r8, r0
 800073c:	fa97 f3a7 	rbit	r3, r7
 8000740:	fa97 f3a7 	rbit	r3, r7
 8000744:	fa97 f3a7 	rbit	r3, r7
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000748:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800074a:	fa97 f3a7 	rbit	r3, r7
 800074e:	fab3 f383 	clz	r3, r3
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	fa04 f303 	lsl.w	r3, r4, r3
 800075a:	4213      	tst	r3, r2
 800075c:	d1da      	bne.n	8000714 <HAL_RCC_OscConfig+0x21c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800075e:	f7ff fd69 	bl	8000234 <HAL_GetTick>
 8000762:	ebc8 0000 	rsb	r0, r8, r0
 8000766:	2802      	cmp	r0, #2
 8000768:	d9e8      	bls.n	800073c <HAL_RCC_OscConfig+0x244>
 800076a:	e734      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
 800076c:	fa94 f2a4 	rbit	r2, r4
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <HAL_RCC_OscConfig+0x2f0>)
 8000772:	fab2 f282 	clz	r2, r2
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	2702      	movs	r7, #2
 800077c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800077e:	f7ff fd59 	bl	8000234 <HAL_GetTick>
 8000782:	4680      	mov	r8, r0
 8000784:	fa97 f3a7 	rbit	r3, r7
 8000788:	fa97 f3a7 	rbit	r3, r7
 800078c:	fa97 f3a7 	rbit	r3, r7
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000790:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000792:	fa97 f3a7 	rbit	r3, r7
 8000796:	fab3 f383 	clz	r3, r3
 800079a:	f003 031f 	and.w	r3, r3, #31
 800079e:	fa04 f303 	lsl.w	r3, r4, r3
 80007a2:	4213      	tst	r3, r2
 80007a4:	d0b6      	beq.n	8000714 <HAL_RCC_OscConfig+0x21c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007a6:	f7ff fd45 	bl	8000234 <HAL_GetTick>
 80007aa:	ebc8 0000 	rsb	r0, r8, r0
 80007ae:	2802      	cmp	r0, #2
 80007b0:	d9e8      	bls.n	8000784 <HAL_RCC_OscConfig+0x28c>
 80007b2:	e710      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007b4:	4c0b      	ldr	r4, [pc, #44]	; (80007e4 <HAL_RCC_OscConfig+0x2ec>)
 80007b6:	69e3      	ldr	r3, [r4, #28]
 80007b8:	00d9      	lsls	r1, r3, #3
 80007ba:	d40a      	bmi.n	80007d2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	69e3      	ldr	r3, [r4, #28]
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	61e3      	str	r3, [r4, #28]
 80007c4:	69e3      	ldr	r3, [r4, #28]
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007ce:	2601      	movs	r6, #1
 80007d0:	e000      	b.n	80007d4 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80007d2:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007d4:	4f05      	ldr	r7, [pc, #20]	; (80007ec <HAL_RCC_OscConfig+0x2f4>)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	05da      	lsls	r2, r3, #23
 80007da:	d509      	bpl.n	80007f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007dc:	68ab      	ldr	r3, [r5, #8]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d117      	bne.n	8000812 <HAL_RCC_OscConfig+0x31a>
 80007e2:	e02d      	b.n	8000840 <HAL_RCC_OscConfig+0x348>
 80007e4:	40021000 	.word	0x40021000
 80007e8:	10908120 	.word	0x10908120
 80007ec:	40007000 	.word	0x40007000
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f6:	603b      	str	r3, [r7, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80007f8:	f7ff fd1c 	bl	8000234 <HAL_GetTick>
 80007fc:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	d4eb      	bmi.n	80007dc <HAL_RCC_OscConfig+0x2e4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000804:	f7ff fd16 	bl	8000234 <HAL_GetTick>
 8000808:	ebc8 0000 	rsb	r0, r8, r0
 800080c:	2864      	cmp	r0, #100	; 0x64
 800080e:	d9f6      	bls.n	80007fe <HAL_RCC_OscConfig+0x306>
 8000810:	e6e1      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000812:	b97b      	cbnz	r3, 8000834 <HAL_RCC_OscConfig+0x33c>
 8000814:	6a23      	ldr	r3, [r4, #32]
 8000816:	f023 0301 	bic.w	r3, r3, #1
 800081a:	6223      	str	r3, [r4, #32]
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	f023 0304 	bic.w	r3, r3, #4
 8000822:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000824:	f7ff fd06 	bl	8000234 <HAL_GetTick>
 8000828:	2702      	movs	r7, #2
 800082a:	4682      	mov	sl, r0
 800082c:	46b9      	mov	r9, r7
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800082e:	f04f 0801 	mov.w	r8, #1
 8000832:	e03d      	b.n	80008b0 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000834:	2b05      	cmp	r3, #5
 8000836:	6a23      	ldr	r3, [r4, #32]
 8000838:	d106      	bne.n	8000848 <HAL_RCC_OscConfig+0x350>
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6223      	str	r3, [r4, #32]
 8000840:	6a23      	ldr	r3, [r4, #32]
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	e005      	b.n	8000854 <HAL_RCC_OscConfig+0x35c>
 8000848:	f023 0301 	bic.w	r3, r3, #1
 800084c:	6223      	str	r3, [r4, #32]
 800084e:	6a23      	ldr	r3, [r4, #32]
 8000850:	f023 0304 	bic.w	r3, r3, #4
 8000854:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000856:	f7ff fced 	bl	8000234 <HAL_GetTick>
 800085a:	2702      	movs	r7, #2
 800085c:	4682      	mov	sl, r0
 800085e:	46b9      	mov	r9, r7
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000860:	f04f 0801 	mov.w	r8, #1
 8000864:	fa97 f3a7 	rbit	r3, r7
 8000868:	fa97 f3a7 	rbit	r3, r7
 800086c:	b10b      	cbz	r3, 8000872 <HAL_RCC_OscConfig+0x37a>
 800086e:	6a22      	ldr	r2, [r4, #32]
 8000870:	e002      	b.n	8000878 <HAL_RCC_OscConfig+0x380>
 8000872:	fa97 f3a7 	rbit	r3, r7
 8000876:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000878:	fa99 f3a9 	rbit	r3, r9
 800087c:	fab3 f383 	clz	r3, r3
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	fa08 f303 	lsl.w	r3, r8, r3
 8000888:	4213      	tst	r3, r2
 800088a:	d121      	bne.n	80008d0 <HAL_RCC_OscConfig+0x3d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800088c:	f7ff fcd2 	bl	8000234 <HAL_GetTick>
 8000890:	f241 3388 	movw	r3, #5000	; 0x1388
 8000894:	ebca 0000 	rsb	r0, sl, r0
 8000898:	4298      	cmp	r0, r3
 800089a:	d9e3      	bls.n	8000864 <HAL_RCC_OscConfig+0x36c>
 800089c:	e69b      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800089e:	f7ff fcc9 	bl	8000234 <HAL_GetTick>
 80008a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80008a6:	ebca 0000 	rsb	r0, sl, r0
 80008aa:	4298      	cmp	r0, r3
 80008ac:	f63f ae93 	bhi.w	80005d6 <HAL_RCC_OscConfig+0xde>
 80008b0:	fa97 f3a7 	rbit	r3, r7
 80008b4:	fa97 f3a7 	rbit	r3, r7
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008b8:	b183      	cbz	r3, 80008dc <HAL_RCC_OscConfig+0x3e4>
 80008ba:	6a22      	ldr	r2, [r4, #32]
 80008bc:	fa99 f3a9 	rbit	r3, r9
 80008c0:	fab3 f383 	clz	r3, r3
 80008c4:	f003 031f 	and.w	r3, r3, #31
 80008c8:	fa08 f303 	lsl.w	r3, r8, r3
 80008cc:	4213      	tst	r3, r2
 80008ce:	d1e6      	bne.n	800089e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80008d0:	b146      	cbz	r6, 80008e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80008d2:	69e3      	ldr	r3, [r4, #28]
 80008d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008d8:	61e3      	str	r3, [r4, #28]
 80008da:	e003      	b.n	80008e4 <HAL_RCC_OscConfig+0x3ec>
 80008dc:	fa97 f3a7 	rbit	r3, r7
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008e2:	e7eb      	b.n	80008bc <HAL_RCC_OscConfig+0x3c4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008e4:	69aa      	ldr	r2, [r5, #24]
 80008e6:	b90a      	cbnz	r2, 80008ec <HAL_RCC_OscConfig+0x3f4>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80008e8:	2000      	movs	r0, #0
 80008ea:	e08a      	b.n	8000a02 <HAL_RCC_OscConfig+0x50a>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008ec:	4c46      	ldr	r4, [pc, #280]	; (8000a08 <HAL_RCC_OscConfig+0x510>)
 80008ee:	6863      	ldr	r3, [r4, #4]
 80008f0:	f003 030c 	and.w	r3, r3, #12
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	f43f ae2d 	beq.w	8000554 <HAL_RCC_OscConfig+0x5c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008fa:	2a02      	cmp	r2, #2
 80008fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000900:	d15a      	bne.n	80009b8 <HAL_RCC_OscConfig+0x4c0>
 8000902:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800090e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000918:	f7ff fc8c 	bl	8000234 <HAL_GetTick>
 800091c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000920:	4681      	mov	r9, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000922:	f04f 0801 	mov.w	r8, #1
 8000926:	fa97 f3a7 	rbit	r3, r7
 800092a:	4a37      	ldr	r2, [pc, #220]	; (8000a08 <HAL_RCC_OscConfig+0x510>)
 800092c:	6821      	ldr	r1, [r4, #0]
 800092e:	fa97 f3a7 	rbit	r3, r7
 8000932:	fab3 f383 	clz	r3, r3
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	fa08 f303 	lsl.w	r3, r8, r3
 800093e:	420b      	tst	r3, r1
 8000940:	f04f 0601 	mov.w	r6, #1
 8000944:	d006      	beq.n	8000954 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000946:	f7ff fc75 	bl	8000234 <HAL_GetTick>
 800094a:	ebc9 0000 	rsb	r0, r9, r0
 800094e:	2802      	cmp	r0, #2
 8000950:	d9e9      	bls.n	8000926 <HAL_RCC_OscConfig+0x42e>
 8000952:	e640      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000954:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000956:	f023 010f 	bic.w	r1, r3, #15
 800095a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800095c:	430b      	orrs	r3, r1
 800095e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000960:	6853      	ldr	r3, [r2, #4]
 8000962:	6a28      	ldr	r0, [r5, #32]
 8000964:	69e9      	ldr	r1, [r5, #28]
 8000966:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 800096a:	4301      	orrs	r1, r0
 800096c:	430b      	orrs	r3, r1
 800096e:	6053      	str	r3, [r2, #4]
 8000970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000974:	fa93 f3a3 	rbit	r3, r3
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000978:	fab3 f383 	clz	r3, r3
 800097c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800098a:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098c:	f7ff fc52 	bl	8000234 <HAL_GetTick>
 8000990:	4607      	mov	r7, r0
 8000992:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000996:	6822      	ldr	r2, [r4, #0]
 8000998:	fa95 f3a5 	rbit	r3, r5
 800099c:	fab3 f383 	clz	r3, r3
 80009a0:	f003 031f 	and.w	r3, r3, #31
 80009a4:	fa06 f303 	lsl.w	r3, r6, r3
 80009a8:	4213      	tst	r3, r2
 80009aa:	d19d      	bne.n	80008e8 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009ac:	f7ff fc42 	bl	8000234 <HAL_GetTick>
 80009b0:	1bc0      	subs	r0, r0, r7
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d9ed      	bls.n	8000992 <HAL_RCC_OscConfig+0x49a>
 80009b6:	e60e      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
 80009b8:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009bc:	fab3 f383 	clz	r3, r3
 80009c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ce:	f7ff fc31 	bl	8000234 <HAL_GetTick>
 80009d2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009d6:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009d8:	2601      	movs	r6, #1
 80009da:	fa95 f3a5 	rbit	r3, r5
 80009de:	6822      	ldr	r2, [r4, #0]
 80009e0:	fa95 f3a5 	rbit	r3, r5
 80009e4:	fab3 f383 	clz	r3, r3
 80009e8:	f003 031f 	and.w	r3, r3, #31
 80009ec:	fa06 f303 	lsl.w	r3, r6, r3
 80009f0:	4213      	tst	r3, r2
 80009f2:	f43f af79 	beq.w	80008e8 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009f6:	f7ff fc1d 	bl	8000234 <HAL_GetTick>
 80009fa:	1bc0      	subs	r0, r0, r7
 80009fc:	2802      	cmp	r0, #2
 80009fe:	d9ec      	bls.n	80009da <HAL_RCC_OscConfig+0x4e2>
 8000a00:	e5e9      	b.n	80005d6 <HAL_RCC_OscConfig+0xde>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000a02:	b002      	add	sp, #8
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a0c:	4911      	ldr	r1, [pc, #68]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x48>)
 8000a0e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a10:	f003 020c 	and.w	r2, r3, #12
 8000a14:	2a08      	cmp	r2, #8
 8000a16:	d11a      	bne.n	8000a4e <HAL_RCC_GetSysClockFreq+0x42>
 8000a18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000a1c:	fa92 f2a2 	rbit	r2, r2
 8000a20:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a22:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a26:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000a28:	fa90 f0a0 	rbit	r0, r0
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a30:	40d3      	lsrs	r3, r2
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <HAL_RCC_GetSysClockFreq+0x4c>)
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a34:	fab0 f080 	clz	r0, r0
 8000a38:	f001 010f 	and.w	r1, r1, #15
 8000a3c:	40c1      	lsrs	r1, r0
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <HAL_RCC_GetSysClockFreq+0x50>)
 8000a42:	5c40      	ldrb	r0, [r0, r1]
 8000a44:	4906      	ldr	r1, [pc, #24]	; (8000a60 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a46:	fbb1 f0f0 	udiv	r0, r1, r0
 8000a4a:	4358      	muls	r0, r3
 8000a4c:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a4e:	4804      	ldr	r0, [pc, #16]	; (8000a60 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	08001844 	.word	0x08001844
 8000a5c:	08001834 	.word	0x08001834
 8000a60:	007a1200 	.word	0x007a1200

08000a64 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a64:	4a5a      	ldr	r2, [pc, #360]	; (8000bd0 <HAL_RCC_ClockConfig+0x16c>)
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a72:	4606      	mov	r6, r0
 8000a74:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a76:	d30a      	bcc.n	8000a8e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a78:	6831      	ldr	r1, [r6, #0]
 8000a7a:	0788      	lsls	r0, r1, #30
 8000a7c:	d514      	bpl.n	8000aa8 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a7e:	4855      	ldr	r0, [pc, #340]	; (8000bd4 <HAL_RCC_ClockConfig+0x170>)
 8000a80:	6843      	ldr	r3, [r0, #4]
 8000a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a86:	68b3      	ldr	r3, [r6, #8]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	6043      	str	r3, [r0, #4]
 8000a8c:	e00c      	b.n	8000aa8 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a8e:	6813      	ldr	r3, [r2, #0]
 8000a90:	f023 0307 	bic.w	r3, r3, #7
 8000a94:	430b      	orrs	r3, r1
 8000a96:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a98:	6813      	ldr	r3, [r2, #0]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d0ea      	beq.n	8000a78 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000aa8:	07ca      	lsls	r2, r1, #31
 8000aaa:	d406      	bmi.n	8000aba <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aac:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_RCC_ClockConfig+0x16c>)
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	429d      	cmp	r5, r3
 8000ab6:	d357      	bcc.n	8000b68 <HAL_RCC_ClockConfig+0x104>
 8000ab8:	e060      	b.n	8000b7c <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aba:	6872      	ldr	r2, [r6, #4]
 8000abc:	4c45      	ldr	r4, [pc, #276]	; (8000bd4 <HAL_RCC_ClockConfig+0x170>)
 8000abe:	2a01      	cmp	r2, #1
 8000ac0:	d10e      	bne.n	8000ae0 <HAL_RCC_ClockConfig+0x7c>
 8000ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac6:	fa93 f1a3 	rbit	r1, r3
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aca:	6821      	ldr	r1, [r4, #0]
 8000acc:	fa93 f3a3 	rbit	r3, r3
 8000ad0:	fab3 f383 	clz	r3, r3
 8000ad4:	f003 031f 	and.w	r3, r3, #31
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	420b      	tst	r3, r1
 8000ade:	e011      	b.n	8000b04 <HAL_RCC_ClockConfig+0xa0>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ae0:	2a02      	cmp	r2, #2
 8000ae2:	bf0c      	ite	eq
 8000ae4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ae8:	2302      	movne	r3, #2
 8000aea:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aee:	6820      	ldr	r0, [r4, #0]
 8000af0:	fa93 f3a3 	rbit	r3, r3
 8000af4:	fab3 f383 	clz	r3, r3
 8000af8:	f003 031f 	and.w	r3, r3, #31
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	4203      	tst	r3, r0
 8000b04:	d0cd      	beq.n	8000aa2 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b06:	6863      	ldr	r3, [r4, #4]
 8000b08:	f023 0303 	bic.w	r3, r3, #3
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b10:	f7ff fb90 	bl	8000234 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b14:	6873      	ldr	r3, [r6, #4]
 8000b16:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b18:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b1e:	d10c      	bne.n	8000b3a <HAL_RCC_ClockConfig+0xd6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b20:	6863      	ldr	r3, [r4, #4]
 8000b22:	f003 030c 	and.w	r3, r3, #12
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d0c0      	beq.n	8000aac <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b2a:	f7ff fb83 	bl	8000234 <HAL_GetTick>
 8000b2e:	1bc0      	subs	r0, r0, r7
 8000b30:	4540      	cmp	r0, r8
 8000b32:	d9f5      	bls.n	8000b20 <HAL_RCC_ClockConfig+0xbc>
        {
          return HAL_TIMEOUT;
 8000b34:	2003      	movs	r0, #3
 8000b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d10f      	bne.n	8000b5e <HAL_RCC_ClockConfig+0xfa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b3e:	6863      	ldr	r3, [r4, #4]
 8000b40:	f003 030c 	and.w	r3, r3, #12
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d0b1      	beq.n	8000aac <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b48:	f7ff fb74 	bl	8000234 <HAL_GetTick>
 8000b4c:	1bc0      	subs	r0, r0, r7
 8000b4e:	4540      	cmp	r0, r8
 8000b50:	d9f5      	bls.n	8000b3e <HAL_RCC_ClockConfig+0xda>
 8000b52:	e7ef      	b.n	8000b34 <HAL_RCC_ClockConfig+0xd0>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b54:	f7ff fb6e 	bl	8000234 <HAL_GetTick>
 8000b58:	1bc0      	subs	r0, r0, r7
 8000b5a:	4540      	cmp	r0, r8
 8000b5c:	d8ea      	bhi.n	8000b34 <HAL_RCC_ClockConfig+0xd0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b5e:	6863      	ldr	r3, [r4, #4]
 8000b60:	f013 0f0c 	tst.w	r3, #12
 8000b64:	d1f6      	bne.n	8000b54 <HAL_RCC_ClockConfig+0xf0>
 8000b66:	e7a1      	b.n	8000aac <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	f023 0307 	bic.w	r3, r3, #7
 8000b6e:	432b      	orrs	r3, r5
 8000b70:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	429d      	cmp	r5, r3
 8000b7a:	d192      	bne.n	8000aa2 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b7c:	6831      	ldr	r1, [r6, #0]
 8000b7e:	4c15      	ldr	r4, [pc, #84]	; (8000bd4 <HAL_RCC_ClockConfig+0x170>)
 8000b80:	f011 0f04 	tst.w	r1, #4
 8000b84:	d005      	beq.n	8000b92 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b86:	6863      	ldr	r3, [r4, #4]
 8000b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b8c:	68f3      	ldr	r3, [r6, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b92:	070b      	lsls	r3, r1, #28
 8000b94:	d506      	bpl.n	8000ba4 <HAL_RCC_ClockConfig+0x140>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b96:	6863      	ldr	r3, [r4, #4]
 8000b98:	6932      	ldr	r2, [r6, #16]
 8000b9a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b9e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ba2:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ba4:	f7ff ff32 	bl	8000a0c <HAL_RCC_GetSysClockFreq>
 8000ba8:	6863      	ldr	r3, [r4, #4]
 8000baa:	22f0      	movs	r2, #240	; 0xf0
 8000bac:	fa92 f2a2 	rbit	r2, r2
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bb8:	40d3      	lsrs	r3, r2
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_RCC_ClockConfig+0x174>)
 8000bbc:	5cd3      	ldrb	r3, [r2, r3]
 8000bbe:	40d8      	lsrs	r0, r3
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_RCC_ClockConfig+0x178>)
 8000bc2:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bc4:	200f      	movs	r0, #15
 8000bc6:	f7ff fb07 	bl	80001d8 <HAL_InitTick>
  
  return HAL_OK;
 8000bca:	2000      	movs	r0, #0
}
 8000bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bd0:	40022000 	.word	0x40022000
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	08001854 	.word	0x08001854
 8000bdc:	20000008 	.word	0x20000008

08000be0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000be0:	6803      	ldr	r3, [r0, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000bea:	6842      	ldr	r2, [r0, #4]
 8000bec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000bf0:	d10a      	bne.n	8000c08 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8000bf2:	6882      	ldr	r2, [r0, #8]
 8000bf4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000bf8:	d002      	beq.n	8000c00 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bfa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000bfe:	d103      	bne.n	8000c08 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000c08:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000c0a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000c0e:	d107      	bne.n	8000c20 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000c20:	2301      	movs	r3, #1
 8000c22:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000c26:	2300      	movs	r3, #0
 8000c28:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	4770      	bx	lr

08000c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c34:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8000c38:	4605      	mov	r5, r0
 8000c3a:	460f      	mov	r7, r1
 8000c3c:	4616      	mov	r6, r2
 8000c3e:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c40:	682a      	ldr	r2, [r5, #0]
 8000c42:	6893      	ldr	r3, [r2, #8]
 8000c44:	ea37 0303 	bics.w	r3, r7, r3
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d00e      	beq.n	8000c70 <SPI_WaitFlagStateUntilTimeout+0x40>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000c52:	1c63      	adds	r3, r4, #1
 8000c54:	d0f5      	beq.n	8000c42 <SPI_WaitFlagStateUntilTimeout+0x12>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c56:	b924      	cbnz	r4, 8000c62 <SPI_WaitFlagStateUntilTimeout+0x32>
 8000c58:	4628      	mov	r0, r5
      }
    }
  }

  return HAL_OK;
}
 8000c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c5e:	f7ff bfbf 	b.w	8000be0 <SPI_WaitFifoStateUntilTimeout.part.1>
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c62:	f7ff fae7 	bl	8000234 <HAL_GetTick>
 8000c66:	ebc8 0000 	rsb	r0, r8, r0
 8000c6a:	4284      	cmp	r4, r0
 8000c6c:	d8e8      	bhi.n	8000c40 <SPI_WaitFlagStateUntilTimeout+0x10>
 8000c6e:	e7f3      	b.n	8000c58 <SPI_WaitFlagStateUntilTimeout+0x28>
      }
    }
  }

  return HAL_OK;
}
 8000c70:	2000      	movs	r0, #0
 8000c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c76 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000c76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000c7a:	9d08      	ldr	r5, [sp, #32]
 8000c7c:	4607      	mov	r7, r0
 8000c7e:	4688      	mov	r8, r1
 8000c80:	4616      	mov	r6, r2
 8000c82:	461c      	mov	r4, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	6890      	ldr	r0, [r2, #8]
 8000c88:	ea00 0008 	and.w	r0, r0, r8
 8000c8c:	42b0      	cmp	r0, r6
 8000c8e:	d016      	beq.n	8000cbe <SPI_WaitFifoStateUntilTimeout+0x48>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000c90:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8000c94:	d106      	bne.n	8000ca4 <SPI_WaitFifoStateUntilTimeout+0x2e>
 8000c96:	b92e      	cbnz	r6, 8000ca4 <SPI_WaitFifoStateUntilTimeout+0x2e>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000c98:	7b13      	ldrb	r3, [r2, #12]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f88d 3007 	strb.w	r3, [sp, #7]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8000ca0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    }

    if (Timeout != HAL_MAX_DELAY)
 8000ca4:	1c63      	adds	r3, r4, #1
 8000ca6:	d0ee      	beq.n	8000c86 <SPI_WaitFifoStateUntilTimeout+0x10>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000ca8:	b91c      	cbnz	r4, 8000cb2 <SPI_WaitFifoStateUntilTimeout+0x3c>
 8000caa:	4638      	mov	r0, r7
 8000cac:	f7ff ff98 	bl	8000be0 <SPI_WaitFifoStateUntilTimeout.part.1>
 8000cb0:	e006      	b.n	8000cc0 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8000cb2:	f7ff fabf 	bl	8000234 <HAL_GetTick>
 8000cb6:	1b40      	subs	r0, r0, r5
 8000cb8:	4284      	cmp	r4, r0
 8000cba:	d8e3      	bhi.n	8000c84 <SPI_WaitFifoStateUntilTimeout+0xe>
 8000cbc:	e7f5      	b.n	8000caa <SPI_WaitFifoStateUntilTimeout+0x34>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000cbe:	2000      	movs	r0, #0
}
 8000cc0:	b002      	add	sp, #8
 8000cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000cc6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000cc8:	460b      	mov	r3, r1
 8000cca:	9200      	str	r2, [sp, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000ccc:	460d      	mov	r5, r1
 8000cce:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000cd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000cd4:	2200      	movs	r2, #0
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000cd6:	4604      	mov	r4, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000cd8:	f7ff ffcd 	bl	8000c76 <SPI_WaitFifoStateUntilTimeout>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	b978      	cbnz	r0, 8000d00 <SPI_EndRxTxTransaction+0x3a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ce0:	9600      	str	r6, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f7ff ffa2 	bl	8000c30 <SPI_WaitFlagStateUntilTimeout>
 8000cec:	4602      	mov	r2, r0
 8000cee:	b938      	cbnz	r0, 8000d00 <SPI_EndRxTxTransaction+0x3a>

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000cf0:	9600      	str	r6, [sp, #0]
 8000cf2:	462b      	mov	r3, r5
 8000cf4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff ffbc 	bl	8000c76 <SPI_WaitFifoStateUntilTimeout>
 8000cfe:	b120      	cbz	r0, 8000d0a <SPI_EndRxTxTransaction+0x44>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d00:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000d08:	2003      	movs	r0, #3
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}

08000d0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000d10:	4604      	mov	r4, r0
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d059      	beq.n	8000dca <HAL_SPI_Init+0xbc>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d16:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8000d1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d1e:	b91b      	cbnz	r3, 8000d28 <HAL_SPI_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000d20:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000d24:	f000 fc1a 	bl	800155c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d2e:	6823      	ldr	r3, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d30:	68e5      	ldr	r5, [r4, #12]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d32:	681a      	ldr	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d34:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	f04f 0200 	mov.w	r2, #0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d42:	d903      	bls.n	8000d4c <HAL_SPI_Init+0x3e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d44:	4610      	mov	r0, r2
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d46:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 8000d4a:	e001      	b.n	8000d50 <HAL_SPI_Init+0x42>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000d4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d50:	bf18      	it	ne
 8000d52:	62a2      	strne	r2, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000d54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d56:	b92a      	cbnz	r2, 8000d64 <HAL_SPI_Init+0x56>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d58:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000d5c:	bf8c      	ite	hi
 8000d5e:	2202      	movhi	r2, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d60:	2201      	movls	r2, #1
 8000d62:	6322      	str	r2, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000d64:	68a1      	ldr	r1, [r4, #8]
 8000d66:	6867      	ldr	r7, [r4, #4]
 8000d68:	69a2      	ldr	r2, [r4, #24]
 8000d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d6c:	430f      	orrs	r7, r1
 8000d6e:	6921      	ldr	r1, [r4, #16]
 8000d70:	430f      	orrs	r7, r1
 8000d72:	6961      	ldr	r1, [r4, #20]
 8000d74:	430f      	orrs	r7, r1
 8000d76:	69e1      	ldr	r1, [r4, #28]
 8000d78:	430f      	orrs	r7, r1
 8000d7a:	6a21      	ldr	r1, [r4, #32]
 8000d7c:	4339      	orrs	r1, r7
 8000d7e:	4331      	orrs	r1, r6
 8000d80:	f402 7700 	and.w	r7, r2, #512	; 0x200
 8000d84:	4339      	orrs	r1, r7
 8000d86:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));
#if (USE_SPI_CRC != 0U)
  /* Configure : CRC Length */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8000d88:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d8a:	2902      	cmp	r1, #2
  {
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 8000d8c:	bf02      	ittt	eq
 8000d8e:	6819      	ldreq	r1, [r3, #0]
 8000d90:	f441 6100 	orreq.w	r1, r1, #2048	; 0x800
 8000d94:	6019      	streq	r1, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000d96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d98:	430d      	orrs	r5, r1
 8000d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d9c:	0c12      	lsrs	r2, r2, #16
 8000d9e:	430d      	orrs	r5, r1
 8000da0:	f002 0104 	and.w	r1, r2, #4
 8000da4:	ea45 0201 	orr.w	r2, r5, r1
 8000da8:	4302      	orrs	r2, r0
                                  hspi->Init.NSSPMode | hspi->Init.DataSize) | frxth);

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000daa:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000dae:	605a      	str	r2, [r3, #4]
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000db0:	bf04      	itt	eq
 8000db2:	6ae2      	ldreq	r2, [r4, #44]	; 0x2c
 8000db4:	611a      	streq	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000db6:	69da      	ldr	r2, [r3, #28]
 8000db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dbe:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000dc0:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dc2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000dc4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8000dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8000dca:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8000dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000dce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000dd2:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000dd4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8000dd8:	2b01      	cmp	r3, #1
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dda:	4604      	mov	r4, r0
 8000ddc:	460d      	mov	r5, r1
 8000dde:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000de0:	f000 80c5 	beq.w	8000f6e <HAL_SPI_Transmit+0x1a0>
 8000de4:	2301      	movs	r3, #1
 8000de6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000dea:	f7ff fa23 	bl	8000234 <HAL_GetTick>
 8000dee:	4607      	mov	r7, r0

  if (hspi->State != HAL_SPI_STATE_READY)
 8000df0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	2801      	cmp	r0, #1
 8000df8:	f040 80b1 	bne.w	8000f5e <HAL_SPI_Transmit+0x190>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pData == NULL) || (Size == 0U))
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	f000 80af 	beq.w	8000f60 <HAL_SPI_Transmit+0x192>
 8000e02:	f1b8 0f00 	cmp.w	r8, #0
 8000e06:	f000 80ab 	beq.w	8000f60 <HAL_SPI_Transmit+0x192>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000e14:	6423      	str	r3, [r4, #64]	; 0x40
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 8000e16:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 8000e1a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8000e1e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8000e22:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000e24:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e26:	68a3      	ldr	r3, [r4, #8]
 8000e28:	6820      	ldr	r0, [r4, #0]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000e2a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  {
    SPI_1LINE_TX(hspi);
 8000e30:	bf08      	it	eq
 8000e32:	6803      	ldreq	r3, [r0, #0]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 8000e34:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 8000e38:	bf04      	itt	eq
 8000e3a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8000e3e:	6003      	streq	r3, [r0, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e46:	d107      	bne.n	8000e58 <HAL_SPI_Transmit+0x8a>
  {
    SPI_RESET_CRC(hspi);
 8000e48:	6803      	ldr	r3, [r0, #0]
 8000e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e4e:	6003      	str	r3, [r0, #0]
 8000e50:	6803      	ldr	r3, [r0, #0]
 8000e52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e56:	6003      	str	r3, [r0, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e58:	6803      	ldr	r3, [r0, #0]
 8000e5a:	065b      	lsls	r3, r3, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000e5c:	bf5e      	ittt	pl
 8000e5e:	6803      	ldrpl	r3, [r0, #0]
 8000e60:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000e64:	6003      	strpl	r3, [r0, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000e66:	68e3      	ldr	r3, [r4, #12]
 8000e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000e6c:	6863      	ldr	r3, [r4, #4]
 8000e6e:	d921      	bls.n	8000eb4 <HAL_SPI_Transmit+0xe6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000e70:	b11b      	cbz	r3, 8000e7a <HAL_SPI_Transmit+0xac>
 8000e72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d10a      	bne.n	8000e90 <HAL_SPI_Transmit+0xc2>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8000e7a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000e7e:	60c3      	str	r3, [r0, #12]
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)pData);
        pData += sizeof(uint16_t);
        hspi->TxXferCount--;
 8000e80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e82:	3b01      	subs	r3, #1
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000e88:	e002      	b.n	8000e90 <HAL_SPI_Transmit+0xc2>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000e8a:	b18e      	cbz	r6, 8000eb0 <HAL_SPI_Transmit+0xe2>
 8000e8c:	1c71      	adds	r1, r6, #1
 8000e8e:	d10a      	bne.n	8000ea6 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8000e90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b1b3      	cbz	r3, 8000ec4 <HAL_SPI_Transmit+0xf6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	0790      	lsls	r0, r2, #30
 8000e9c:	d5f5      	bpl.n	8000e8a <HAL_SPI_Transmit+0xbc>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e9e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	e7ec      	b.n	8000e80 <HAL_SPI_Transmit+0xb2>
        hspi->TxXferCount--;
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000ea6:	f7ff f9c5 	bl	8000234 <HAL_GetTick>
 8000eaa:	1bc0      	subs	r0, r0, r7
 8000eac:	4286      	cmp	r6, r0
 8000eae:	d8ef      	bhi.n	8000e90 <HAL_SPI_Transmit+0xc2>
        {
          errorcode = HAL_TIMEOUT;
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	e055      	b.n	8000f60 <HAL_SPI_Transmit+0x192>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000eb4:	b183      	cbz	r3, 8000ed8 <HAL_SPI_Transmit+0x10a>
 8000eb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_SPI_Transmit+0x10a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
        hspi->TxXferCount--;
      }
    }
    while (hspi->TxXferCount > 0U)
 8000ebe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b9a3      	cbnz	r3, 8000eee <HAL_SPI_Transmit+0x120>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ec4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eca:	d132      	bne.n	8000f32 <HAL_SPI_Transmit+0x164>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e02c      	b.n	8000f32 <HAL_SPI_Transmit+0x164>
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
    {
      if (hspi->TxXferCount > 1U)
 8000ed8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d903      	bls.n	8000ee8 <HAL_SPI_Transmit+0x11a>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8000ee0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000ee4:	60c3      	str	r3, [r0, #12]
 8000ee6:	e00d      	b.n	8000f04 <HAL_SPI_Transmit+0x136>
        pData += sizeof(uint16_t);
        hspi->TxXferCount -= 2U;
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000ee8:	782b      	ldrb	r3, [r5, #0]
 8000eea:	7303      	strb	r3, [r0, #12]
 8000eec:	e011      	b.n	8000f12 <HAL_SPI_Transmit+0x144>
      }
    }
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	0792      	lsls	r2, r2, #30
 8000ef4:	d513      	bpl.n	8000f1e <HAL_SPI_Transmit+0x150>
      {
        if (hspi->TxXferCount > 1U)
 8000ef6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000ef8:	b292      	uxth	r2, r2
 8000efa:	2a01      	cmp	r2, #1
 8000efc:	d907      	bls.n	8000f0e <HAL_SPI_Transmit+0x140>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8000efe:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f02:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
 8000f04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f06:	3b02      	subs	r3, #2
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000f0c:	e7d7      	b.n	8000ebe <HAL_SPI_Transmit+0xf0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000f0e:	782a      	ldrb	r2, [r5, #0]
 8000f10:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8000f12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f14:	3b01      	subs	r3, #1
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	87e3      	strh	r3, [r4, #62]	; 0x3e
          pData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000f1a:	3501      	adds	r5, #1
 8000f1c:	e7cf      	b.n	8000ebe <HAL_SPI_Transmit+0xf0>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000f1e:	2e00      	cmp	r6, #0
 8000f20:	d0c6      	beq.n	8000eb0 <HAL_SPI_Transmit+0xe2>
 8000f22:	1c73      	adds	r3, r6, #1
 8000f24:	d0cb      	beq.n	8000ebe <HAL_SPI_Transmit+0xf0>
 8000f26:	f7ff f985 	bl	8000234 <HAL_GetTick>
 8000f2a:	1bc0      	subs	r0, r0, r7
 8000f2c:	4286      	cmp	r6, r0
 8000f2e:	d8c6      	bhi.n	8000ebe <HAL_SPI_Transmit+0xf0>
 8000f30:	e7be      	b.n	8000eb0 <HAL_SPI_Transmit+0xe2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f32:	463a      	mov	r2, r7
 8000f34:	4631      	mov	r1, r6
 8000f36:	4620      	mov	r0, r4
 8000f38:	f7ff fec5 	bl	8000cc6 <SPI_EndRxTxTransaction>
 8000f3c:	b108      	cbz	r0, 8000f42 <HAL_SPI_Transmit+0x174>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000f42:	68a3      	ldr	r3, [r4, #8]
 8000f44:	b933      	cbnz	r3, 8000f54 <HAL_SPI_Transmit+0x186>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	9201      	str	r2, [sp, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	9b01      	ldr	r3, [sp, #4]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f54:	6e20      	ldr	r0, [r4, #96]	; 0x60
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if (hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 8000f56:	3000      	adds	r0, #0
 8000f58:	bf18      	it	ne
 8000f5a:	2001      	movne	r0, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_SPI_Transmit+0x192>
 8000f5e:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000f66:	2300      	movs	r3, #0
 8000f68:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8000f6c:	e000      	b.n	8000f70 <HAL_SPI_Transmit+0x1a2>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000f6e:	2002      	movs	r0, #2
error:
  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8000f70:	b002      	add	sp, #8
 8000f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000f76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	461e      	mov	r6, r3
  uint32_t tmp = 0U, tmp1 = 0U;
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000f84:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000f88:	9f0c      	ldr	r7, [sp, #48]	; 0x30

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000f8a:	2b01      	cmp	r3, #1
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	460d      	mov	r5, r1
 8000f90:	4691      	mov	r9, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000f92:	f000 819b 	beq.w	80012cc <HAL_SPI_TransmitReceive+0x356>
 8000f96:	2301      	movs	r3, #1
 8000f98:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000f9c:	f7ff f94a 	bl	8000234 <HAL_GetTick>

  tmp  = hspi->State;
 8000fa0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 8000fa4:	6861      	ldr	r1, [r4, #4]
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  tmp  = hspi->State;
 8000fa6:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000fa8:	2b01      	cmp	r3, #1

  /* Process Locked */
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000faa:	4680      	mov	r8, r0

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000fac:	d00a      	beq.n	8000fc4 <HAL_SPI_TransmitReceive+0x4e>
 8000fae:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000fb2:	f040 8182 	bne.w	80012ba <HAL_SPI_TransmitReceive+0x344>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000fb6:	68a2      	ldr	r2, [r4, #8]
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	f040 817e 	bne.w	80012ba <HAL_SPI_TransmitReceive+0x344>
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	f040 817b 	bne.w	80012ba <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000fc4:	2d00      	cmp	r5, #0
 8000fc6:	f000 8176 	beq.w	80012b6 <HAL_SPI_TransmitReceive+0x340>
 8000fca:	f1b9 0f00 	cmp.w	r9, #0
 8000fce:	f000 8172 	beq.w	80012b6 <HAL_SPI_TransmitReceive+0x340>
 8000fd2:	2e00      	cmp	r6, #0
 8000fd4:	f000 816f 	beq.w	80012b6 <HAL_SPI_TransmitReceive+0x340>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fd8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000fdc:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fe0:	2b04      	cmp	r3, #4
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000fe2:	bf1c      	itt	ne
 8000fe4:	2305      	movne	r3, #5
 8000fe6:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000fee:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8000ff0:	6523      	str	r3, [r4, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8000ff4:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
 8000ffc:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001000:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001002:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001004:	87a6      	strh	r6, [r4, #60]	; 0x3c
 8001006:	6823      	ldr	r3, [r4, #0]
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001008:	d107      	bne.n	800101a <HAL_SPI_TransmitReceive+0xa4>
  {
    SPI_RESET_CRC(hspi);
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001018:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800101a:	68e0      	ldr	r0, [r4, #12]
 800101c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8001020:	d804      	bhi.n	800102c <HAL_SPI_TransmitReceive+0xb6>
 8001022:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001026:	b292      	uxth	r2, r2
 8001028:	2a01      	cmp	r2, #1
 800102a:	d903      	bls.n	8001034 <HAL_SPI_TransmitReceive+0xbe>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001032:	e002      	b.n	800103a <HAL_SPI_TransmitReceive+0xc4>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800103a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	0656      	lsls	r6, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001040:	bf5e      	ittt	pl
 8001042:	681a      	ldrpl	r2, [r3, #0]
 8001044:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001048:	601a      	strpl	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800104a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800104e:	d95e      	bls.n	800110e <HAL_SPI_TransmitReceive+0x198>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001050:	b119      	cbz	r1, 800105a <HAL_SPI_TransmitReceive+0xe4>
 8001052:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001054:	b292      	uxth	r2, r2
 8001056:	2a01      	cmp	r2, #1
 8001058:	d106      	bne.n	8001068 <HAL_SPI_TransmitReceive+0xf2>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800105a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800105e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
 8001060:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001062:	3b01      	subs	r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	87e3      	strh	r3, [r4, #62]	; 0x3e
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
        pRxData += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001068:	2601      	movs	r6, #1
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800106a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d042      	beq.n	80010f8 <HAL_SPI_TransmitReceive+0x182>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001072:	b336      	cbz	r6, 80010c2 <HAL_SPI_TransmitReceive+0x14c>
 8001074:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001076:	b29b      	uxth	r3, r3
 8001078:	b303      	cbz	r3, 80010bc <HAL_SPI_TransmitReceive+0x146>
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	0791      	lsls	r1, r2, #30
 8001080:	d51c      	bpl.n	80010bc <HAL_SPI_TransmitReceive+0x146>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001082:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001086:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
 8001088:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800108a:	3a01      	subs	r2, #1
 800108c:	b292      	uxth	r2, r2
 800108e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001090:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
 8001092:	b2b6      	uxth	r6, r6
 8001094:	b9a6      	cbnz	r6, 80010c0 <HAL_SPI_TransmitReceive+0x14a>
 8001096:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001098:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800109c:	d111      	bne.n	80010c2 <HAL_SPI_TransmitReceive+0x14c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	0752      	lsls	r2, r2, #29
 80010a2:	d406      	bmi.n	80010b2 <HAL_SPI_TransmitReceive+0x13c>
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	0716      	lsls	r6, r2, #28
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80010a8:	bf42      	ittt	mi
 80010aa:	681a      	ldrmi	r2, [r3, #0]
 80010ac:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 80010b0:	601a      	strmi	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e001      	b.n	80010c0 <HAL_SPI_TransmitReceive+0x14a>
 80010bc:	2601      	movs	r6, #1
 80010be:	e000      	b.n	80010c2 <HAL_SPI_TransmitReceive+0x14c>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80010c0:	2600      	movs	r6, #0
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80010c2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b16b      	cbz	r3, 80010e6 <HAL_SPI_TransmitReceive+0x170>
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	07d0      	lsls	r0, r2, #31
 80010d0:	d509      	bpl.n	80010e6 <HAL_SPI_TransmitReceive+0x170>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f829 3b02 	strh.w	r3, [r9], #2
        pRxData += sizeof(uint16_t);
        hspi->RxXferCount--;
 80010d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80010dc:	3b01      	subs	r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80010e4:	2601      	movs	r6, #1
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80010e6:	1c79      	adds	r1, r7, #1
 80010e8:	d0bf      	beq.n	800106a <HAL_SPI_TransmitReceive+0xf4>
 80010ea:	f7ff f8a3 	bl	8000234 <HAL_GetTick>
 80010ee:	ebc8 0000 	rsb	r0, r8, r0
 80010f2:	4287      	cmp	r7, r0
 80010f4:	d8b9      	bhi.n	800106a <HAL_SPI_TransmitReceive+0xf4>
 80010f6:	e0bf      	b.n	8001278 <HAL_SPI_TransmitReceive+0x302>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1b7      	bne.n	8001072 <HAL_SPI_TransmitReceive+0xfc>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001102:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001108:	f040 80be 	bne.w	8001288 <HAL_SPI_TransmitReceive+0x312>
 800110c:	e08e      	b.n	800122c <HAL_SPI_TransmitReceive+0x2b6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800110e:	b119      	cbz	r1, 8001118 <HAL_SPI_TransmitReceive+0x1a2>
 8001110:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001112:	b292      	uxth	r2, r2
 8001114:	2a01      	cmp	r2, #1
 8001116:	d112      	bne.n	800113e <HAL_SPI_TransmitReceive+0x1c8>
    {
      if (hspi->TxXferCount > 1U)
 8001118:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800111a:	b292      	uxth	r2, r2
 800111c:	2a01      	cmp	r2, #1
 800111e:	d907      	bls.n	8001130 <HAL_SPI_TransmitReceive+0x1ba>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001120:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001124:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount -= 2U;
 8001126:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001128:	3b02      	subs	r3, #2
 800112a:	b29b      	uxth	r3, r3
 800112c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800112e:	e006      	b.n	800113e <HAL_SPI_TransmitReceive+0x1c8>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001130:	782a      	ldrb	r2, [r5, #0]
 8001132:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001134:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001136:	3b01      	subs	r3, #1
 8001138:	b29b      	uxth	r3, r3
 800113a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount -= 2U;
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800113c:	3501      	adds	r5, #1
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800113e:	2601      	movs	r6, #1
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
        hspi->TxXferCount--;
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001140:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001142:	b29b      	uxth	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d06b      	beq.n	8001220 <HAL_SPI_TransmitReceive+0x2aa>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001148:	2e00      	cmp	r6, #0
 800114a:	d034      	beq.n	80011b6 <HAL_SPI_TransmitReceive+0x240>
 800114c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800114e:	b29b      	uxth	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d02d      	beq.n	80011b0 <HAL_SPI_TransmitReceive+0x23a>
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	0792      	lsls	r2, r2, #30
 800115a:	d529      	bpl.n	80011b0 <HAL_SPI_TransmitReceive+0x23a>
      {
        if (hspi->TxXferCount > 1U)
 800115c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800115e:	b292      	uxth	r2, r2
 8001160:	2a01      	cmp	r2, #1
 8001162:	d907      	bls.n	8001174 <HAL_SPI_TransmitReceive+0x1fe>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001164:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001168:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
 800116a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800116c:	3b02      	subs	r3, #2
 800116e:	b29b      	uxth	r3, r3
 8001170:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001172:	e006      	b.n	8001182 <HAL_SPI_TransmitReceive+0x20c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001174:	782a      	ldrb	r2, [r5, #0]
 8001176:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001178:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	87e3      	strh	r3, [r4, #62]	; 0x3e
          pTxData += sizeof(uint16_t);
          hspi->TxXferCount -= 2U;
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001180:	3501      	adds	r5, #1
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001182:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
 8001184:	b2b6      	uxth	r6, r6
 8001186:	b9ae      	cbnz	r6, 80011b4 <HAL_SPI_TransmitReceive+0x23e>
 8001188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800118a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800118e:	d112      	bne.n	80011b6 <HAL_SPI_TransmitReceive+0x240>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	0756      	lsls	r6, r2, #29
 8001196:	d406      	bmi.n	80011a6 <HAL_SPI_TransmitReceive+0x230>
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	0710      	lsls	r0, r2, #28
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800119c:	bf42      	ittt	mi
 800119e:	681a      	ldrmi	r2, [r3, #0]
 80011a0:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 80011a4:	601a      	strmi	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e001      	b.n	80011b4 <HAL_SPI_TransmitReceive+0x23e>
 80011b0:	2601      	movs	r6, #1
 80011b2:	e000      	b.n	80011b6 <HAL_SPI_TransmitReceive+0x240>
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
          hspi->TxXferCount--;
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80011b4:	2600      	movs	r6, #0
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80011b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b33b      	cbz	r3, 800120e <HAL_SPI_TransmitReceive+0x298>
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	6893      	ldr	r3, [r2, #8]
 80011c2:	07d9      	lsls	r1, r3, #31
 80011c4:	d523      	bpl.n	800120e <HAL_SPI_TransmitReceive+0x298>
      {
        if (hspi->RxXferCount > 1U)
 80011c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d912      	bls.n	80011f6 <HAL_SPI_TransmitReceive+0x280>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80011d0:	68d3      	ldr	r3, [r2, #12]
 80011d2:	f829 3b02 	strh.w	r3, [r9], #2
          pRxData += sizeof(uint16_t);
          hspi->RxXferCount -= 2U;
 80011d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80011da:	3b02      	subs	r3, #2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80011e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d80f      	bhi.n	800120c <HAL_SPI_TransmitReceive+0x296>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80011ec:	6853      	ldr	r3, [r2, #4]
 80011ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f2:	6053      	str	r3, [r2, #4]
 80011f4:	e00a      	b.n	800120c <HAL_SPI_TransmitReceive+0x296>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80011f6:	7b13      	ldrb	r3, [r2, #12]
 80011f8:	f889 3000 	strb.w	r3, [r9]
          hspi->RxXferCount--;
 80011fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001200:	3b01      	subs	r3, #1
 8001202:	b29b      	uxth	r3, r3
 8001204:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001208:	f109 0901 	add.w	r9, r9, #1
          hspi->RxXferCount--;
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800120c:	2601      	movs	r6, #1
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800120e:	1c7b      	adds	r3, r7, #1
 8001210:	d096      	beq.n	8001140 <HAL_SPI_TransmitReceive+0x1ca>
 8001212:	f7ff f80f 	bl	8000234 <HAL_GetTick>
 8001216:	ebc8 0000 	rsb	r0, r8, r0
 800121a:	4287      	cmp	r7, r0
 800121c:	d890      	bhi.n	8001140 <HAL_SPI_TransmitReceive+0x1ca>
 800121e:	e02b      	b.n	8001278 <HAL_SPI_TransmitReceive+0x302>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
        hspi->TxXferCount--;
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001220:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d18e      	bne.n	8001148 <HAL_SPI_TransmitReceive+0x1d2>
 800122a:	e76a      	b.n	8001102 <HAL_SPI_TransmitReceive+0x18c>
#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800122c:	2201      	movs	r2, #1
 800122e:	f8cd 8000 	str.w	r8, [sp]
 8001232:	463b      	mov	r3, r7
 8001234:	4611      	mov	r1, r2
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff fcfa 	bl	8000c30 <SPI_WaitFlagStateUntilTimeout>
 800123c:	b9c0      	cbnz	r0, 8001270 <HAL_SPI_TransmitReceive+0x2fa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      errorcode = HAL_TIMEOUT;
      goto error;
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800123e:	68e3      	ldr	r3, [r4, #12]
 8001240:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	d102      	bne.n	800124e <HAL_SPI_TransmitReceive+0x2d8>
    {
      tmpreg = hspi->Instance->DR;
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	b29b      	uxth	r3, r3
 800124c:	e018      	b.n	8001280 <HAL_SPI_TransmitReceive+0x30a>
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800124e:	7b1b      	ldrb	r3, [r3, #12]
 8001250:	f8ad 300e 	strh.w	r3, [sp, #14]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001254:	f8bd 300e 	ldrh.w	r3, [sp, #14]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001258:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800125a:	2b02      	cmp	r3, #2
 800125c:	d114      	bne.n	8001288 <HAL_SPI_TransmitReceive+0x312>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800125e:	2201      	movs	r2, #1
 8001260:	f8cd 8000 	str.w	r8, [sp]
 8001264:	463b      	mov	r3, r7
 8001266:	4611      	mov	r1, r2
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fce1 	bl	8000c30 <SPI_WaitFlagStateUntilTimeout>
 800126e:	b128      	cbz	r0, 800127c <HAL_SPI_TransmitReceive+0x306>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001270:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8001278:	2503      	movs	r5, #3
          goto error;
 800127a:	e01f      	b.n	80012bc <HAL_SPI_TransmitReceive+0x346>
        }
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	7b1b      	ldrb	r3, [r3, #12]
 8001280:	f8ad 300e 	strh.w	r3, [sp, #14]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 8001284:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	6895      	ldr	r5, [r2, #8]
 800128c:	f015 0510 	ands.w	r5, r5, #16
 8001290:	d007      	beq.n	80012a2 <HAL_SPI_TransmitReceive+0x32c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001292:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6623      	str	r3, [r4, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800129a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800129e:	6093      	str	r3, [r2, #8]

    errorcode = HAL_ERROR;
 80012a0:	2501      	movs	r5, #1
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80012a2:	4642      	mov	r2, r8
 80012a4:	4639      	mov	r1, r7
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff fd0d 	bl	8000cc6 <SPI_EndRxTxTransaction>
 80012ac:	b108      	cbz	r0, 80012b2 <HAL_SPI_TransmitReceive+0x33c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80012ae:	2320      	movs	r3, #32
 80012b0:	6623      	str	r3, [r4, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80012b4:	b113      	cbz	r3, 80012bc <HAL_SPI_TransmitReceive+0x346>
  {
    errorcode = HAL_ERROR;
 80012b6:	2501      	movs	r5, #1
 80012b8:	e000      	b.n	80012bc <HAL_SPI_TransmitReceive+0x346>
  tmp1 = hspi->Init.Mode;

  if (!((tmp == HAL_SPI_STATE_READY) || \
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80012ba:	2502      	movs	r5, #2
  {
    errorcode = HAL_ERROR;
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80012bc:	2301      	movs	r3, #1
 80012be:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80012c2:	2300      	movs	r3, #0
 80012c4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80012c8:	4628      	mov	r0, r5
 80012ca:	e000      	b.n	80012ce <HAL_SPI_TransmitReceive+0x358>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80012cc:	2002      	movs	r0, #2

error :
  hspi->State = HAL_SPI_STATE_READY;
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80012ce:	b005      	add	sp, #20
 80012d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012d4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b510      	push	{r4, lr}
 80012d6:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80012e2:	2301      	movs	r3, #1
 80012e4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012ec:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80012ee:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2310      	movs	r3, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f4:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80012f6:	f7ff f8ff 	bl	80004f8 <HAL_RCC_OscConfig>
 80012fa:	b100      	cbz	r0, 80012fe <SystemClock_Config+0x2a>
 80012fc:	e7fe      	b.n	80012fc <SystemClock_Config+0x28>
    while(1); 
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80012fe:	230f      	movs	r3, #15
 8001300:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001304:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001308:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 800130a:	4621      	mov	r1, r4
 800130c:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001310:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8001312:	f7ff fba7 	bl	8000a64 <HAL_RCC_ClockConfig>
 8001316:	b100      	cbz	r0, 800131a <SystemClock_Config+0x46>
 8001318:	e7fe      	b.n	8001318 <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1); 
  }
}
 800131a:	b010      	add	sp, #64	; 0x40
 800131c:	bd10      	pop	{r4, pc}
	...

08001320 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_GPIO_Init+0x88>)
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */

void MX_GPIO_Init(void)
{
 8001322:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001324:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001326:	4e21      	ldr	r6, [pc, #132]	; (80013ac <MX_GPIO_Init+0x8c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001328:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	695a      	ldr	r2, [r3, #20]
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */

void MX_GPIO_Init(void)
{
 8001330:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800135e:	4630      	mov	r0, r6
 8001360:	2108      	movs	r1, #8

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2400      	movs	r4, #0
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001368:	f7ff f8bc 	bl	80004e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800136c:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	a903      	add	r1, sp, #12
 8001370:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001372:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f7fe ffd9 	bl	8000330 <HAL_GPIO_Init>
  //CE
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	a903      	add	r1, sp, #12
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA0 */
  //CE
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001384:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f7fe ffd0 	bl	8000330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  //CSN
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001390:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	a903      	add	r1, sp, #12
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA1 */
  //CSN
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001398:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f7fe ffc6 	bl	8000330 <HAL_GPIO_Init>

}
 80013a4:	b008      	add	sp, #32
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000400 	.word	0x48000400

080013b0 <send_data_to_spi>:
  }
}
#endif

 void send_data_to_spi(uint8_t spiCmd,uint8_t spiData)
 {
 80013b0:	b513      	push	{r0, r1, r4, lr}
	RESET_CE;
 80013b2:	2200      	movs	r2, #0
  }
}
#endif

 void send_data_to_spi(uint8_t spiCmd,uint8_t spiData)
 {
 80013b4:	f88d 0007 	strb.w	r0, [sp, #7]
 80013b8:	f88d 1006 	strb.w	r1, [sp, #6]
	RESET_CE;
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	2101      	movs	r1, #1
 80013c2:	f7ff f88f 	bl	80004e4 <HAL_GPIO_WritePin>
	SET_CSN;
 80013c6:	2201      	movs	r2, #1
 80013c8:	2102      	movs	r1, #2
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f7ff f889 	bl	80004e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013d2:	200a      	movs	r0, #10
 80013d4:	f7fe ff34 	bl	8000240 <HAL_Delay>
	SET_CE;
 80013d8:	2201      	movs	r2, #1
 80013da:	4611      	mov	r1, r2
	RESET_CSN;

	HAL_SPI_Transmit(&SpiHandle, &spiCmd, 1, 0);
 80013dc:	4c0d      	ldr	r4, [pc, #52]	; (8001414 <send_data_to_spi+0x64>)
 void send_data_to_spi(uint8_t spiCmd,uint8_t spiData)
 {
	RESET_CE;
	SET_CSN;
	HAL_Delay(10);
	SET_CE;
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f7ff f87f 	bl	80004e4 <HAL_GPIO_WritePin>
	RESET_CSN;
 80013e6:	2200      	movs	r2, #0
 80013e8:	2102      	movs	r1, #2
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f7ff f879 	bl	80004e4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&SpiHandle, &spiCmd, 1, 0);
 80013f2:	f10d 0107 	add.w	r1, sp, #7
 80013f6:	2300      	movs	r3, #0
 80013f8:	2201      	movs	r2, #1
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff fce7 	bl	8000dce <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SpiHandle, &spiData, 1, 0);
 8001400:	2300      	movs	r3, #0
 8001402:	2201      	movs	r2, #1
 8001404:	f10d 0106 	add.w	r1, sp, #6
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff fce0 	bl	8000dce <HAL_SPI_Transmit>
 }
 800140e:	b002      	add	sp, #8
 8001410:	bd10      	pop	{r4, pc}
 8001412:	bf00      	nop
 8001414:	2000002c 	.word	0x2000002c

08001418 <receive_data_to_spi>:


 uint8_t receive_data_to_spi(uint8_t spiCmd, uint8_t spiData)
 {
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	b086      	sub	sp, #24
	RESET_CE;
 800141c:	2200      	movs	r2, #0
    HAL_SPI_Transmit(&SpiHandle, &spiData, 1, 0);
 }


 uint8_t receive_data_to_spi(uint8_t spiCmd, uint8_t spiData)
 {
 800141e:	f88d 000f 	strb.w	r0, [sp, #15]
 8001422:	f88d 100e 	strb.w	r1, [sp, #14]
	RESET_CE;
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	2101      	movs	r1, #1
 800142c:	f7ff f85a 	bl	80004e4 <HAL_GPIO_WritePin>
	SET_CSN;
 8001430:	2201      	movs	r2, #1
 8001432:	2102      	movs	r1, #2
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f7ff f854 	bl	80004e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800143c:	200a      	movs	r0, #10
 800143e:	f7fe feff 	bl	8000240 <HAL_Delay>
	SET_CE;
 8001442:	2201      	movs	r2, #1
	RESET_CSN;
	uint8_t Rxd_Data = 0;
 8001444:	ac06      	add	r4, sp, #24
 uint8_t receive_data_to_spi(uint8_t spiCmd, uint8_t spiData)
 {
	RESET_CE;
	SET_CSN;
	HAL_Delay(10);
	SET_CE;
 8001446:	4611      	mov	r1, r2
 8001448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144c:	f7ff f84a 	bl	80004e4 <HAL_GPIO_WritePin>
	RESET_CSN;
	uint8_t Rxd_Data = 0;
 8001450:	2500      	movs	r5, #0
 {
	RESET_CE;
	SET_CSN;
	HAL_Delay(10);
	SET_CE;
	RESET_CSN;
 8001452:	2200      	movs	r2, #0
 8001454:	2102      	movs	r1, #2
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f7ff f843 	bl	80004e4 <HAL_GPIO_WritePin>
	uint8_t Rxd_Data = 0;

	HAL_SPI_TransmitReceive(&SpiHandle, &spiCmd, &Rxd_Data, 1, 0);
 800145e:	4e0b      	ldr	r6, [pc, #44]	; (800148c <receive_data_to_spi+0x74>)
	RESET_CE;
	SET_CSN;
	HAL_Delay(10);
	SET_CE;
	RESET_CSN;
	uint8_t Rxd_Data = 0;
 8001460:	f804 5d01 	strb.w	r5, [r4, #-1]!

	HAL_SPI_TransmitReceive(&SpiHandle, &spiCmd, &Rxd_Data, 1, 0);
 8001464:	f10d 010f 	add.w	r1, sp, #15
 8001468:	4622      	mov	r2, r4
 800146a:	9500      	str	r5, [sp, #0]
 800146c:	2301      	movs	r3, #1
 800146e:	4630      	mov	r0, r6
 8001470:	f7ff fd81 	bl	8000f76 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&SpiHandle, &spiData, &Rxd_Data, 1, 0);
 8001474:	9500      	str	r5, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	4622      	mov	r2, r4
 800147a:	f10d 010e 	add.w	r1, sp, #14
 800147e:	4630      	mov	r0, r6
 8001480:	f7ff fd79 	bl	8000f76 <HAL_SPI_TransmitReceive>
	return Rxd_Data;
 }
 8001484:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001488:	b006      	add	sp, #24
 800148a:	bd70      	pop	{r4, r5, r6, pc}
 800148c:	2000002c 	.word	0x2000002c

08001490 <main>:
  * @param  None
  * @retval None
  */
int main(void)

{
 8001490:	b510      	push	{r4, lr}
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001492:	f7fe feb5 	bl	8000200 <HAL_Init>
  
  /* Configure the system clock to 64 MHz */
  SystemClock_Config();
 8001496:	f7ff ff1d 	bl	80012d4 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800149a:	2000      	movs	r0, #0
 800149c:	f000 f8b8 	bl	8001610 <BSP_LED_Init>
  MX_GPIO_Init();
 80014a0:	f7ff ff3e 	bl	8001320 <MX_GPIO_Init>
  /*##-1- Configure the SPI peripheral #######################################*/
  /* Set the SPI parameters */
  SpiHandle.Instance               = SPIx;
 80014a4:	482b      	ldr	r0, [pc, #172]	; (8001554 <main+0xc4>)
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <main+0xc8>)
 80014a8:	6003      	str	r3, [r0, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
  SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80014aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  BSP_LED_Init(LED2);
  MX_GPIO_Init();
  /*##-1- Configure the SPI peripheral #######################################*/
  /* Set the SPI parameters */
  SpiHandle.Instance               = SPIx;
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014ae:	2338      	movs	r3, #56	; 0x38
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
  SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80014b0:	60c2      	str	r2, [r0, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  SpiHandle.Init.CRCPolynomial     = 7;
 80014b2:	2207      	movs	r2, #7
  BSP_LED_Init(LED2);
  MX_GPIO_Init();
  /*##-1- Configure the SPI peripheral #######################################*/
  /* Set the SPI parameters */
  SpiHandle.Instance               = SPIx;
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014b4:	61c3      	str	r3, [r0, #28]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  SpiHandle.Init.CRCPolynomial     = 7;
 80014b6:	62c2      	str	r2, [r0, #44]	; 0x2c
  MX_GPIO_Init();
  /*##-1- Configure the SPI peripheral #######################################*/
  /* Set the SPI parameters */
  SpiHandle.Instance               = SPIx;
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80014b8:	2300      	movs	r3, #0
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  SpiHandle.Init.CRCPolynomial     = 7;
  SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 80014ba:	2201      	movs	r2, #1
  MX_GPIO_Init();
  /*##-1- Configure the SPI peripheral #######################################*/
  /* Set the SPI parameters */
  SpiHandle.Instance               = SPIx;
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80014bc:	6083      	str	r3, [r0, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80014be:	6143      	str	r3, [r0, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80014c0:	6103      	str	r3, [r0, #16]
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80014c2:	6203      	str	r3, [r0, #32]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 80014c4:	6243      	str	r3, [r0, #36]	; 0x24
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80014c6:	6283      	str	r3, [r0, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
  SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 80014c8:	6302      	str	r2, [r0, #48]	; 0x30
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
  SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
 80014ca:	6343      	str	r3, [r0, #52]	; 0x34
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  SpiHandle.Init.CRCPolynomial     = 7;
  SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

#ifdef MASTER_BOARD
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80014d0:	f44f 7382 	mov.w	r3, #260	; 0x104
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  SpiHandle.Init.CRCPolynomial     = 7;
  SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80014d4:	6182      	str	r2, [r0, #24]
  SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

#ifdef MASTER_BOARD
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80014d6:	6043      	str	r3, [r0, #4]
#else
  SpiHandle.Init.Mode = SPI_MODE_SLAVE;
#endif /* MASTER_BOARD */

  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 80014d8:	f7ff fc19 	bl	8000d0e <HAL_SPI_Init>
 80014dc:	4601      	mov	r1, r0
 80014de:	b138      	cbz	r0, 80014f0 <main+0x60>
static void Error_Handler(void)
{
  while(1)
  {
    /* Toggle LED2 for error */
    BSP_LED_Toggle(LED2);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 f8c7 	bl	8001674 <BSP_LED_Toggle>
    HAL_Delay(1000);
 80014e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ea:	f7fe fea9 	bl	8000240 <HAL_Delay>
 80014ee:	e7f7      	b.n	80014e0 <main+0x50>
    Error_Handler();
  }

#ifdef MASTER_BOARD
  /* Configure User push-button button */
  BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);
 80014f0:	f000 f8c8 	bl	8001684 <BSP_PB_Init>

  /* Wait for User push-button press before starting the Communication */
  while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_RESET)
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f901 	bl	80016fc <BSP_PB_GetState>
 80014fa:	4604      	mov	r4, r0
 80014fc:	b130      	cbz	r0, 800150c <main+0x7c>
  {
    BSP_LED_Toggle(LED2);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f8b8 	bl	8001674 <BSP_LED_Toggle>
    HAL_Delay(100);
 8001504:	2064      	movs	r0, #100	; 0x64
 8001506:	f7fe fe9b 	bl	8000240 <HAL_Delay>
 800150a:	e7f3      	b.n	80014f4 <main+0x64>
  }
  BSP_LED_Off(LED2);
 800150c:	f000 f8a8 	bl	8001660 <BSP_LED_Off>
  //configuration of nRF24L01
  //CONFIG
  //PRIM_RX = 0
  //PWR_UP = 1
  //MASK_MAX_RT = 1
  SET_CE;
 8001510:	2201      	movs	r2, #1
 8001512:	4611      	mov	r1, r2
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f7fe ffe4 	bl	80004e4 <HAL_GPIO_WritePin>
  spiCmd = _NRF24L01P_SPI_CMD_WR_REG | _NRF24L01P_REG_CONFIG;
  spiData = 26; //'00011010'
  send_data_to_spi(spiCmd, spiData);
 800151c:	211a      	movs	r1, #26
 800151e:	2020      	movs	r0, #32
 8001520:	f7ff ff46 	bl	80013b0 <send_data_to_spi>

  //to read the content of the CONFIG register in nrf24L01 module
  spiCmd = _NRF24L01P_SPI_CMD_RD_REG | _NRF24L01P_REG_CONFIG;
  spiData = 0; //'00000000'
  spiData = receive_data_to_spi(spiCmd, spiData);
 8001524:	4621      	mov	r1, r4
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff ff76 	bl	8001418 <receive_data_to_spi>

  //EN_AA
  // enable auto ACK
  spiCmd = _NRF24L01P_SPI_CMD_WR_REG | _NRF24L01P_REG_EN_AA;
 // spiData = 63; //'00111111'
  send_data_to_spi(spiCmd, spiData);
 800152c:	4601      	mov	r1, r0
 800152e:	2021      	movs	r0, #33	; 0x21
 8001530:	f7ff ff3e 	bl	80013b0 <send_data_to_spi>

  //EN_RXADDR
  //Enable data pipe 0 and 1
  spiCmd = _NRF24L01P_SPI_CMD_WR_REG | _NRF24L01P_REG_EN_RXADDR;
  spiData = 3; //'00000011'
  send_data_to_spi(spiCmd, spiData);
 8001534:	2103      	movs	r1, #3
 8001536:	2022      	movs	r0, #34	; 0x22
 8001538:	f7ff ff3a 	bl	80013b0 <send_data_to_spi>

  //FLUSH_TX
  spiCmd = _NRF24L01P_SPI_CMD_FLUSH_TX;
  spiData = 0; //'00000011'
  send_data_to_spi(spiCmd, spiData);
 800153c:	4621      	mov	r1, r4
 800153e:	20e1      	movs	r0, #225	; 0xe1
 8001540:	f7ff ff36 	bl	80013b0 <send_data_to_spi>

  //FLUSH_RX
  spiCmd = _NRF24L01P_SPI_CMD_FLUSH_RX;
  spiData = 0; //'00000011'
  send_data_to_spi(spiCmd, spiData);
 8001544:	4621      	mov	r1, r4
 8001546:	20e2      	movs	r0, #226	; 0xe2
 8001548:	f7ff ff32 	bl	80013b0 <send_data_to_spi>
  while (1)
  {
	  //W_TX_PAYLOAD
      spiCmd = _NRF24L01P_SPI_CMD_WR_TX_PAYLOAD;
      spiData = 12; //'00001100'
      send_data_to_spi(spiCmd, spiData);
 800154c:	210c      	movs	r1, #12
 800154e:	20a0      	movs	r0, #160	; 0xa0
 8001550:	e7fa      	b.n	8001548 <main+0xb8>
 8001552:	bf00      	nop
 8001554:	2000002c 	.word	0x2000002c
 8001558:	40003c00 	.word	0x40003c00

0800155c <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800155c:	b510      	push	{r4, lr}
GPIO_InitTypeDef  GPIO_InitStruct;

  if(hspi->Instance == SPIx)
 800155e:	6802      	ldr	r2, [r0, #0]
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_SPI_MspInit+0x98>)
 8001562:	429a      	cmp	r2, r3
  *           - Peripheral's GPIO Configuration  
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001564:	b08a      	sub	sp, #40	; 0x28
GPIO_InitTypeDef  GPIO_InitStruct;

  if(hspi->Instance == SPIx)
 8001566:	d143      	bne.n	80015f0 <HAL_SPI_MspInit+0x94>
  {     
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001568:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 800156c:	2406      	movs	r4, #6

  if(hspi->Instance == SPIx)
  {     
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 800156e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <HAL_SPI_MspInit+0x9c>)

  if(hspi->Instance == SPIx)
  {     
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001572:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800157e:	9201      	str	r2, [sp, #4]
 8001580:	9a01      	ldr	r2, [sp, #4]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001588:	615a      	str	r2, [r3, #20]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001590:	9202      	str	r2, [sp, #8]
 8001592:	9a02      	ldr	r2, [sp, #8]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800159a:	615a      	str	r2, [r3, #20]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80015a2:	9203      	str	r2, [sp, #12]
 80015a4:	9a03      	ldr	r2, [sp, #12]
    /* Enable SPI clock */
    SPIx_CLK_ENABLE(); 
 80015a6:	69da      	ldr	r2, [r3, #28]
 80015a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ac:	61da      	str	r2, [r3, #28]
 80015ae:	69db      	ldr	r3, [r3, #28]
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 80015b0:	9409      	str	r4, [sp, #36]	; 0x24
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
    SPIx_MISO_GPIO_CLK_ENABLE();
    SPIx_MOSI_GPIO_CLK_ENABLE();
    /* Enable SPI clock */
    SPIx_CLK_ENABLE(); 
 80015b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b6:	9304      	str	r3, [sp, #16]
 80015b8:	9b04      	ldr	r3, [sp, #16]
    
    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 80015ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80015c4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80015c6:	a905      	add	r1, sp, #20
    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80015cc:	f7fe feb0 	bl	8000330 <HAL_GPIO_Init>

    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 80015d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 80015d4:	a905      	add	r1, sp, #20
 80015d6:	4808      	ldr	r0, [pc, #32]	; (80015f8 <HAL_SPI_MspInit+0x9c>)
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);

    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 80015d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 80015da:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 80015dc:	f7fe fea8 	bl	8000330 <HAL_GPIO_Init>

    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80015e4:	a905      	add	r1, sp, #20
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <HAL_SPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);

    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 80015e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 80015ea:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80015ec:	f7fe fea0 	bl	8000330 <HAL_GPIO_Init>
  }
}
 80015f0:	b00a      	add	sp, #40	; 0x28
 80015f2:	bd10      	pop	{r4, pc}
 80015f4:	40003c00 	.word	0x40003c00
 80015f8:	48000800 	.word	0x48000800

080015fc <NMI_Handler>:
 80015fc:	4770      	bx	lr

080015fe <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler>

08001600 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler>

08001602 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler>

08001604 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler>

08001606 <SVC_Handler>:
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800160c:	f7fe be0a 	b.w	8000224 <HAL_IncTick>

08001610 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001612:	4604      	mov	r4, r0
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001614:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001616:	b948      	cbnz	r0, 800162c <BSP_LED_Init+0x1c>
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <BSP_LED_Init+0x48>)
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800162c:	4d0b      	ldr	r5, [pc, #44]	; (800165c <BSP_LED_Init+0x4c>)
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001630:	2620      	movs	r6, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001638:	a901      	add	r1, sp, #4
 800163a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	9304      	str	r3, [sp, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001640:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8001644:	f7fe fe74 	bl	8000330 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001648:	463a      	mov	r2, r7
 800164a:	4631      	mov	r1, r6
 800164c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001650:	f7fe ff48 	bl	80004e4 <HAL_GPIO_WritePin>
}
 8001654:	b007      	add	sp, #28
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	20000004 	.word	0x20000004

08001660 <BSP_LED_Off>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <BSP_LED_Off+0x10>)
 8001662:	2200      	movs	r2, #0
 8001664:	2120      	movs	r1, #32
 8001666:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800166a:	f7fe bf3b 	b.w	80004e4 <HAL_GPIO_WritePin>
 800166e:	bf00      	nop
 8001670:	20000004 	.word	0x20000004

08001674 <BSP_LED_Toggle>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <BSP_LED_Toggle+0xc>)
 8001676:	2120      	movs	r1, #32
 8001678:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800167c:	f7fe bf37 	b.w	80004ee <HAL_GPIO_TogglePin>
 8001680:	20000004 	.word	0x20000004

08001684 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001684:	b510      	push	{r4, lr}
 8001686:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001688:	b948      	cbnz	r0, 800169e <BSP_PB_Init+0x1a>
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <BSP_PB_Init+0x6c>)
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	9b00      	ldr	r3, [sp, #0]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800169e:	b971      	cbnz	r1, 80016be <BSP_PB_Init+0x3a>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80016a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016a6:	2302      	movs	r3, #2
 80016a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <BSP_PB_Init+0x70>)

  if(ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b0:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80016b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80016b6:	a901      	add	r1, sp, #4
 80016b8:	f7fe fe3a 	bl	8000330 <HAL_GPIO_Init>
 80016bc:	e016      	b.n	80016ec <BSP_PB_Init+0x68>
  }
 
  if(ButtonMode == BUTTON_MODE_EXTI)
 80016be:	2901      	cmp	r1, #1
 80016c0:	d114      	bne.n	80016ec <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80016c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <BSP_PB_Init+0x74>)
 80016ca:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <BSP_PB_Init+0x70>)
 
  if(ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80016d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 
  if(ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80016d6:	a901      	add	r1, sp, #4
 80016d8:	f7fe fe2a 	bl	8000330 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80016dc:	2028      	movs	r0, #40	; 0x28
 80016de:	4622      	mov	r2, r4
 80016e0:	210f      	movs	r1, #15
 80016e2:	f7fe fdcf 	bl	8000284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80016e6:	2028      	movs	r0, #40	; 0x28
 80016e8:	f7fe fe00 	bl	80002ec <HAL_NVIC_EnableIRQ>
  }
}
 80016ec:	b006      	add	sp, #24
 80016ee:	bd10      	pop	{r4, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	20000000 	.word	0x20000000
 80016f8:	10110000 	.word	0x10110000

080016fc <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80016fc:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <BSP_PB_GetState+0x14>)
 8001700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001704:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001708:	f7fe fee6 	bl	80004d8 <HAL_GPIO_ReadPin>
}
 800170c:	bd08      	pop	{r3, pc}
 800170e:	bf00      	nop
 8001710:	20000000 	.word	0x20000000

08001714 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001714:	4915      	ldr	r1, [pc, #84]	; (800176c <SystemInit+0x58>)
 8001716:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800171a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <SystemInit+0x5c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800172c:	6858      	ldr	r0, [r3, #4]
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <SystemInit+0x60>)
 8001730:	4002      	ands	r2, r0
 8001732:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800173a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800173e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001746:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800174e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001752:	f022 020f 	bic.w	r2, r2, #15
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001758:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800175a:	4a07      	ldr	r2, [pc, #28]	; (8001778 <SystemInit+0x64>)
 800175c:	4002      	ands	r2, r0
 800175e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001768:	608b      	str	r3, [r1, #8]
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	40021000 	.word	0x40021000
 8001774:	f87fc00c 	.word	0xf87fc00c
 8001778:	ff00fccc 	.word	0xff00fccc

0800177c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001780:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001782:	e003      	b.n	800178c <LoopCopyDataInit>

08001784 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001786:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001788:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800178a:	3104      	adds	r1, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001790:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001792:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001794:	d3f6      	bcc.n	8001784 <CopyDataInit>
	ldr	r2, =_sbss
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001798:	e002      	b.n	80017a0 <LoopFillZerobss>

0800179a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800179a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800179c:	f842 3b04 	str.w	r3, [r2], #4

080017a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <LoopForever+0x16>)
	cmp	r2, r3
 80017a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017a4:	d3f9      	bcc.n	800179a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017a6:	f7ff ffb5 	bl	8001714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017aa:	f000 f811 	bl	80017d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ae:	f7ff fe6f 	bl	8001490 <main>

080017b2 <LoopForever>:

LoopForever:
    b LoopForever
 80017b2:	e7fe      	b.n	80017b2 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017b4:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80017b8:	0800186c 	.word	0x0800186c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017c0:	2000000c 	.word	0x2000000c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80017c4:	2000000c 	.word	0x2000000c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80017c8:	20000104 	.word	0x20000104

080017cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>
	...

080017d0 <__libc_init_array>:
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <__libc_init_array+0x3c>)
 80017d4:	4c0e      	ldr	r4, [pc, #56]	; (8001810 <__libc_init_array+0x40>)
 80017d6:	1ae4      	subs	r4, r4, r3
 80017d8:	10a4      	asrs	r4, r4, #2
 80017da:	2500      	movs	r5, #0
 80017dc:	461e      	mov	r6, r3
 80017de:	42a5      	cmp	r5, r4
 80017e0:	d004      	beq.n	80017ec <__libc_init_array+0x1c>
 80017e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017e6:	4798      	blx	r3
 80017e8:	3501      	adds	r5, #1
 80017ea:	e7f8      	b.n	80017de <__libc_init_array+0xe>
 80017ec:	f000 f816 	bl	800181c <_init>
 80017f0:	4c08      	ldr	r4, [pc, #32]	; (8001814 <__libc_init_array+0x44>)
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <__libc_init_array+0x48>)
 80017f4:	1ae4      	subs	r4, r4, r3
 80017f6:	10a4      	asrs	r4, r4, #2
 80017f8:	2500      	movs	r5, #0
 80017fa:	461e      	mov	r6, r3
 80017fc:	42a5      	cmp	r5, r4
 80017fe:	d004      	beq.n	800180a <__libc_init_array+0x3a>
 8001800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001804:	4798      	blx	r3
 8001806:	3501      	adds	r5, #1
 8001808:	e7f8      	b.n	80017fc <__libc_init_array+0x2c>
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	08001864 	.word	0x08001864
 8001810:	08001864 	.word	0x08001864
 8001814:	08001868 	.word	0x08001868
 8001818:	08001864 	.word	0x08001864

0800181c <_init>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr

08001828 <_fini>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	bf00      	nop
 800182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182e:	bc08      	pop	{r3}
 8001830:	469e      	mov	lr, r3
 8001832:	4770      	bx	lr
